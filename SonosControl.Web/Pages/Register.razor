@page "/register"
@using Microsoft.AspNetCore.Identity
@using SonosControl.Web.Models
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<div class="container p-4 bg-dark text-light rounded-4 shadow" style="max-width: 480px; margin-top: 3rem;">
    <h3 class="mb-4 border-bottom pb-2">🔐 Register New Account</h3>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        
        @if (!string.IsNullOrEmpty(registerModel.statusMessage))
        {
            <p class="text-danger">@registerModel.statusMessage</p>
        }

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.UserName" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email (optional)</label>
            <InputText id="email" type="email" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.Email" />
        </div>
        
        <div class="mb-3">
            <label for="firstname" class="form-label">Firstname</label>
            <InputText id="firstname" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.Firstname" />
        </div>
        
        <div class="mb-3">
            <label for="lastname" class="form-label">Lastname</label>
            <InputText id="lastname" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.Lastname" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.Password" />
        </div>

        <div class="mb-4">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control bg-secondary text-light border-0" @bind-Value="registerModel.ConfirmPassword" />
        </div>

        <button type="submit" class="btn btn-success w-100 mb-3">Register</button>
        <button type="button" class="btn btn-outline-light w-100" @onclick="GoToLogin">Already have an account? Login</button>
    </EditForm>
</div>

@code {
    private RegisterModel registerModel = new();

    private async Task HandleRegister()
    {
        registerModel.statusMessage = "";
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            registerModel.statusMessage = "Passwords do not match.";
            return;
        }
        if (string.IsNullOrWhiteSpace(registerModel.UserName) ||
            string.IsNullOrWhiteSpace(registerModel.Firstname) ||
            string.IsNullOrWhiteSpace(registerModel.Lastname))
        {
            registerModel.statusMessage = "Username, First Name, and Last Name are required.";
            return;
        }

        var user = new ApplicationUser
        {
            UserName = registerModel.UserName,
            Email = registerModel.Email,
            FirstName = registerModel.Firstname,
            LastName = registerModel.Lastname,
            EmailConfirmed = false
        };

        var result = await UserManager.CreateAsync(user, registerModel.Password);
        if (result.Succeeded)
        {
            Navigation.NavigateTo("/auth/login");
        }
        else
        {
            registerModel.statusMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/auth/login");
    }

    public class RegisterModel
    {
        public string UserName { get; set; }
        public string Firstname { get; set; }
        public string Lastname { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
        public string statusMessage { get; set; }
    }
}


<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        margin-top: 10px;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    input.form-control.bg-secondary::placeholder {
        color: rgba(255, 255, 255, 0.6); /* soft white */
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }

    .station-remove-btn,
    .spotify-remove-btn {
        padding: 2px 8px;
        font-size: 0.75rem;
        line-height: 1;
        width: auto;
        white-space: nowrap;
    }

</style>
