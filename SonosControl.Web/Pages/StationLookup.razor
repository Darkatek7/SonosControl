@page "/lookup"
@using System.Net.Http.Json
@using System.Linq
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;
@attribute [Authorize(Roles = "admin,operator,superadmin")]


        <div class="container p-4 bg-dark text-light rounded-4 shadow mt-4" style="max-width: 600px;">
            <h4 class="text-center mb-4 border-bottom pb-2">📻 Station Lookup</h4>

            @if (!string.IsNullOrEmpty(saveSuccessMessage))
            {
                <div class="alert alert-success">@saveSuccessMessage</div>
            }

            @if (!string.IsNullOrEmpty(addStationErrorMessage))
            {
                <div class="alert alert-danger">@addStationErrorMessage</div>
            }

            <div class="mb-3">
                <input class="form-control bg-secondary text-light border-0"
                       @bind-value="searchTerm"
                       @bind-value:event="oninput"
                       placeholder="Search for a radio station..."
                       @onkeydown="HandleKeyDown"/>
            </div>

            <button class="btn btn-primary w-100 mb-3"
                    @onclick="SearchStations"
                    disabled="@string.IsNullOrWhiteSpace(searchTerm)">
                🔍 Search
            </button>

            @if (isLoading)
            {
                <p class="text-center text-muted">Searching...</p>
            }
            else if (results?.Any() == true)
            {
                <ul class="list-group">
                    @foreach (var station in results)
                    {
                        <li class="list-group-item bg-dark text-light border-secondary station-item">
                            <div class="station-info">
                                <strong>@(station.Name.Length > 50 ? station.Name[..50] + "..." : station.Name)</strong><br/>
                                <small class="text-muted">@GetCleanUrl(station.Url)</small>
                            </div>
                            <div class="station-actions">
                                <button class="btn btn-outline-success btn-sm me-1"
                                        @onclick="() => PlayStation(station.Url)">
                                    🔊
                                </button>
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SaveStation(station)">
                                    💾
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else if (results is not null)
            {
                <p class="text-center text-muted">No stations found.</p>
            }
        </div>

@code {
    private SonosSettings? _settings;
    private string searchTerm;
    private List<RadioStation> results;
    private bool isLoading = false;
    private string? saveSuccessMessage;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            _settings = await _uow.ISettingsRepo.GetSettings();
        }
    }

    private async Task SearchStations()
    {
        isLoading = true;
        results = null;

        try
        {
            var http = new HttpClient();
            string apiUrl = $"https://de1.api.radio-browser.info/json/stations/search?name={Uri.EscapeDataString(searchTerm)}";
            results = await http.GetFromJsonAsync<List<RadioStation>>(apiUrl);

            if (results is null)
            {
                results = new List<RadioStation>();
            }
            else
            {
                results = results
                    .Where(station => station is not null && !string.IsNullOrWhiteSpace(station.Url))
                    .GroupBy(station => NormalizeUrl(station.Url))
                    .Select(group => group.First())
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching stations: " + ex.Message);
        }

        isLoading = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // Check if the pressed key is the "Enter" key
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchTerm))
        {
            await SearchStations();
        }
    }

    private async Task CopyFormatted(RadioStation station)
    {
        if (!string.IsNullOrWhiteSpace(station.Url))
        {
            try
            {
                var uri = new Uri(station.Url);
                // Get just host + path (e.g., "web.radio.example.com/stream.mp3")
                var cleanUrl = uri.Host + uri.AbsolutePath;
                await JS.InvokeVoidAsync("navigator.clipboard.writeText", cleanUrl);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Invalid URL: {station.Url} - {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("URL is null or empty.");
        }
    }

    private string GetCleanUrl(string url)
    {
        var uri = new Uri(url);
        // Get just host + path (e.g., "web.radio.example.com/stream.mp3")
        var cleanUrl = uri.Host + uri.AbsolutePath;

        return cleanUrl;
    }

    private async Task PlayStation(string url)
    {
        if (_settings is not null)
        {
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings.IP_Adress, GetCleanUrl(url));
            Console.WriteLine($@"Station {url} played successfully.");
            await AddLog("Playing Station", $"station: {url}");
        }
    }

    public class RadioStation
    {
        public string Name { get; set; }
        public string Url { get; set; } // ✅ Use this field
        public string Country { get; set; }
        public string Tags { get; set; }
    }

    private string? addStationErrorMessage;

    private async Task SaveStation(RadioStation station)
    {
        addStationErrorMessage = null;
        saveSuccessMessage = null;

        if (_settings == null)
        {
            _settings = new SonosSettings();
        }

        if (_settings.Stations == null)
        {
            _settings.Stations = new List<TuneInStation>();
        }

        try
        {
            string normalizedUrl = NormalizeUrl(station.Url);
            string normalizedName = station.Name.Trim().ToLowerInvariant();

            bool alreadyExists = _settings.Stations.Any(s =>
                NormalizeUrl(s.Url) == normalizedUrl ||
                s.Name.Trim().ToLowerInvariant() == normalizedName);

            if (alreadyExists)
            {
                addStationErrorMessage = "Station is already saved.";
                return;
            }

            _settings.Stations.Add(new TuneInStation { Name = station.Name, Url = station.Url });
            await SaveSettings();
            await AddLog("Added Station", $"station: {station.Name}, ({station.Url})");

            saveSuccessMessage = $"✅ \"{station.Name}\" saved!";
            Console.WriteLine($@"Station {station.Name} saved successfully.");

            await InvokeAsync(StateHasChanged);
            await Task.Delay(3000);
            saveSuccessMessage = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            addStationErrorMessage = $"Error saving station: {ex.Message}";
        }
    }

    private string NormalizeUrl(string url)
    {
        try
        {
            var uri = new Uri(url);
            return uri.Host.ToLowerInvariant().TrimEnd('/') + uri.AbsolutePath.ToLowerInvariant().TrimEnd('/');
        }
        catch
        {
            return url?.Trim().ToLowerInvariant() ?? "";
        }
    }


    private async Task SaveSettings()
    {
        // Implement your settings saving logic here, for example:
        await _uow.ISettingsRepo.WriteSettings(_settings);
    }

    private async Task AddLog(string action, string? details = null)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name ?? "Unknown";

        var log = new LogEntry
        {
            Action = action,
            PerformedBy = username,
            Timestamp = DateTime.UtcNow,
            Details = details
        };

        Db.Logs.Add(log);
        await Db.SaveChangesAsync();
    }

}


<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    input.form-control.bg-secondary::placeholder {
        color: rgba(255, 255, 255, 0.6); /* soft white */
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }

    .station-remove-btn,
    .spotify-remove-btn {
        padding: 2px 8px;
        font-size: 0.75rem;
        line-height: 1;
        width: auto;
        white-space: nowrap;
    }

    .station-item {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .station-info {
        flex: 1 1 70%;
        min-width: 200px;
    }

    .station-actions {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        flex-shrink: 0;
    }

    @@media (max-width: 576px) {
        .station-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .station-actions {
            width: 100%;
            justify-content: flex-end;
        }
    }


</style>