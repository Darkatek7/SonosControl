@page "/config"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;

<AuthorizeView Roles="admin,operator,superadmin">
    <Authorized>
        @if (_settings is null)
        {
            <p class="text-muted">Loading settings...</p>
        }
        else
        {
            <div class="container p-4 shadow-lg rounded-4 bg-dark text-light" style="max-width: 600px;">
                <h4 class="mb-4 border-bottom pb-2">🔊 Speaker Settings</h4>

                <div class="mb-3">
                    <label class="form-label">💻 IP Address</label>
                    <input type="text" class="form-control bg-secondary text-light border-0"
                           @bind-value="IP_Adress"
                           @bind-value:event="oninput"
                           placeholder="Enter IP Address"
                           disabled="@(!canEditIp)"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">🔉 Volume</label>
                    <input type="number" class="form-control bg-secondary text-light border-0"
                           max="100" min="1"
                           @bind-value="Volume"
                           @bind-value:event="oninput"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">🎵 Auto Play</label>
                    <select class="form-select bg-secondary text-light border-0"
                            @bind="AutoPlaySelection" @bind:event="onchange">
                        <option value="">-- None --</option>
                        <optgroup label="Stations">
                            @foreach (var station in _settings.Stations)
                            {
                                <option value="station:@station.Url">@station.Name</option>
                            }
                        </optgroup>
                        <optgroup label="Spotify">
                            @foreach (var track in _settings.SpotifyTracks)
                            {
                                <option value="spotify:@track.Url">@track.Name</option>
                            }
                        </optgroup>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">⏰ Start Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           @bind-value="StartTime"
                           @bind-value:event="oninput"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">🛑 Stop Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           @bind-value="StopTime"
                           @bind-value:event="oninput"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">📅 Server Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           disabled
                           @bind-value="TimeRightNow"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">📆 Active Days</label>
                    <div class="active-days-grid mt-2">
                        @foreach (var day in Enum.GetValues<DayOfWeek>().OrderBy(d => ((int)d + 6) % 7)) // Monday to Sunday
                        {
                            <div>
                                <input type="checkbox"
                                       class="btn-check"
                                       id="btncheck-@day"
                                       checked="@DaySelection[day]"
                                       @onchange="(e => OnDayChanged(day, e.Value))"/>
                                <label class="btn btn-outline-light btn-sm w-100" for="btncheck-@day">
                                    @day.ToString().Substring(0, 3)
                                </label>
                            </div>
                        }
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">🗓️ Daily Schedule</label>
                    <table class="table table-dark table-striped mb-0">
                        <thead>
                        <tr>
                            <th>Day</th>
                            <th>Start</th>
                            <th>Stop</th>
                            <th>Play</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var day in Enum.GetValues<DayOfWeek>().OrderBy(d => ((int)d + 6) % 7))
                        {
                            if (!_settings.DailySchedules.ContainsKey(day))
                                _settings.DailySchedules[day] = new DaySchedule();

                            var schedule = _settings.DailySchedules[day];
                            <tr>
                                <td>@day.ToString().Substring(0,3)</td>
                                <td>
                                    <input type="time" class="form-control bg-secondary text-light border-0"
                                           @bind-value="schedule.StartTime" @bind-value:event="oninput" @onchange="async _ => await SaveSettings()" />
                                </td>
                                <td>
                                    <input type="time" class="form-control bg-secondary text-light border-0"
                                           @bind-value="schedule.StopTime" @bind-value:event="oninput" @onchange="async _ => await SaveSettings()" />
                                </td>
                                <td>
                                    <select class="form-select bg-secondary text-light border-0"
                                            value="@GetScheduleSelection(schedule)"
                                            @onchange="async e => await SetScheduleSelection(schedule, e.Value?.ToString())">
                                        <option value="">-- None --</option>
                                        <optgroup label="Stations">
                                            @foreach (var station in _settings.Stations)
                                            {
                                                <option value="station:@station.Url">@station.Name</option>
                                            }
                                        </optgroup>
                                        <optgroup label="Spotify">
                                            @foreach (var track in _settings.SpotifyTracks)
                                            {
                                                <option value="spotify:@track.Url">@track.Name</option>
                                            }
                                        </optgroup>
                                    </select>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            You must be logged in as an admin, superadmin, or operator to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private SonosSettings? _settings;
    private TimeOnly TimeRightNow = TimeOnly.FromDateTime(DateTime.Now);
    private Dictionary<DayOfWeek, bool> DaySelection = new();
    private bool canEditIp;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        canEditIp = user.IsInRole("admin") || user.IsInRole("superadmin");

        if (user.Identity?.IsAuthenticated ?? false)
        {
            _settings = await _uow.ISettingsRepo.GetSettings();

            // Default to weekdays if no ActiveDays are set
            if (_settings.ActiveDays == null || !_settings.ActiveDays.Any())
            {
                _settings.ActiveDays = Enum.GetValues<DayOfWeek>()
                    .Where(d => d != DayOfWeek.Saturday && d != DayOfWeek.Sunday)
                    .ToList();

                // Persist the updated default back to the config file
                await _uow.ISettingsRepo.WriteSettings(_settings);
            }

            // Build checkbox model
            foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                DaySelection[day] = _settings.ActiveDays.Contains(day);
            }
        }
    }


    private TimeOnly StartTime
    {
        get => _settings!.StartTime;
        set
        {
            _settings!.StartTime = value;
            SaveSettings();
            AddLog("Starttime Changed", $"Time: {value}");
        }
    }

    private TimeOnly StopTime
    {
        get => _settings!.StopTime;
        set
        {
            _settings!.StopTime = value;
            SaveSettings();
            AddLog("Stoptime Changed", $"Time: {value}");
        }
    }

    private string AutoPlaySelection
    {
        get
        {
            if (!string.IsNullOrEmpty(_settings!.AutoPlayStationUrl))
                return $"station:{_settings.AutoPlayStationUrl}";
            if (!string.IsNullOrEmpty(_settings.AutoPlaySpotifyUrl))
                return $"spotify:{_settings.AutoPlaySpotifyUrl}";
            return string.Empty;
        }
        set
        {
            _settings!.AutoPlayStationUrl = null;
            _settings.AutoPlaySpotifyUrl = null;
            if (!string.IsNullOrEmpty(value))
            {
                var parts = value.Split(':', 2);
                if (parts[0] == "station")
                    _settings.AutoPlayStationUrl = parts[1];
                else if (parts[0] == "spotify")
                    _settings.AutoPlaySpotifyUrl = parts[1];
            }
            SaveSettings();
        }
    }

    private async Task SaveSettings()
    {
        _settings.ActiveDays = DaySelection
            .Where(kv => kv.Value)
            .Select(kv => kv.Key)
            .ToList();

        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }

    private string GetScheduleSelection(DaySchedule schedule)
    {
        if (!string.IsNullOrEmpty(schedule.StationUrl))
            return $"station:{schedule.StationUrl}";
        if (!string.IsNullOrEmpty(schedule.SpotifyUrl))
            return $"spotify:{schedule.SpotifyUrl}";
        return string.Empty;
    }

    private async Task SetScheduleSelection(DaySchedule schedule, string? value)
    {
        schedule.StationUrl = null;
        schedule.SpotifyUrl = null;
        if (!string.IsNullOrEmpty(value))
        {
            var parts = value.Split(':', 2);
            if (parts[0] == "station")
                schedule.StationUrl = parts[1];
            else if (parts[0] == "spotify")
                schedule.SpotifyUrl = parts[1];
        }
        await SaveSettings();
    }

    private int Volume
    {
        get => _settings!.Volume;
        set
        {
            _settings!.Volume = value;
            _uow.ISonosConnectorRepo.SetVolume(_settings!.IP_Adress, value);
            SaveSettings();
            //AddLog("Volume Changed", $"Volume: {value}");
        }
    }

    private async Task OnDayChanged(DayOfWeek dayKey, object? value)
    {
        bool isChecked = value is bool b && b;
        DaySelection[dayKey] = isChecked;

        await SaveSettings();
    }


    private string IP_Adress
    {
        get => _settings!.IP_Adress;
        set
        {
            if (!canEditIp)
                return;

            _settings!.IP_Adress = value;
            SaveSettings();
            AddLog("IP-Adress Changed", $"IP: {value}");
        }
    }

    private async Task AddLog(string action, string? details = null)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name ?? "Unknown";

        var log = new LogEntry
        {
            Action = action,
            PerformedBy = username,
            Timestamp = DateTime.UtcNow,
            Details = details
        };

        Db.Logs.Add(log);
        await Db.SaveChangesAsync();
    }

}


<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .active-days-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 0.5rem;
    }

    .active-days-grid .btn {
        font-size: 0.85rem;
        padding: 0.45rem;
        font-weight: 500;
    }

    .btn-check + .btn {
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        font-size: 0.85rem;
    }

    @@media (max-width: 400px) {
    .col-4 {
        flex: 0 0 50%;
        max-width: 50%;
    }
    }

    .active-days-grid {
        display: grid;
        gap: 0.5rem;
        grid-template-columns: repeat(7, 1fr); /* exactly 7 buttons per row */
    }

    @@media (max-width: 576px) {
    .active-days-grid {
        grid-template-columns: repeat(3, 1fr); /* 3 per row on mobile */
    }
    }

    .active-days-grid .btn {
        font-size: 0.85rem;
        padding: 0.45rem;
        font-weight: 500;
        white-space: nowrap;
    }


</style>