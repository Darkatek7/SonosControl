@page "/config"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;
@attribute [Authorize(Roles = "admin,superadmin")]


        @if (_settings is null)
        {
            <p class="text-muted">Loading settings...</p>
        }
        else
        {
            <div class="container p-4 shadow-lg rounded-4 bg-dark text-light" style="max-width: 600px;">
                <h4 class="mb-4 border-bottom pb-2">🔊 Speaker Settings</h4>

                <div class="mb-3">
                    <label class="form-label">💻 IP Address</label>
                    <input type="text" class="form-control bg-secondary text-light border-0"
                           @bind-value="IP_Adress"
                           @bind-value:event="oninput"
                           placeholder="Enter IP Address"
                           disabled="@(!canEditIp)"/>
                </div>

                <div class="mb-3">
                    <label class="form-label d-block">⚙️ Device Actions</label>
                    <button class="btn btn-outline-warning"
                            @onclick="SendRebootCommand"
                            disabled="@(_isRebooting || string.IsNullOrWhiteSpace(_settings?.IP_Adress))">
                        @if (_isRebooting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Reboot Speaker
                    </button>
                    @if (!string.IsNullOrEmpty(_rebootAlertMessage))
                    {
                        <div class="alert @_rebootAlertCss mt-2 mb-0">@_rebootAlertMessage</div>
                    }
                </div>

                <div class="mb-3">
                    <label class="form-label">🎵 Auto Play</label>
                    <select class="form-select bg-secondary text-light border-0"
                            @bind="AutoPlaySelection" @bind:event="onchange">
                        <option value="">-- None --</option>
                        <option value="randomStation">Random Station</option>
                        <option value="randomSpotify">Random Spotify</option>
                        <optgroup label="Stations">
                            @foreach (var station in _settings.Stations)
                            {
                                <option value="station:@station.Url">@station.Name</option>
                            }
                        </optgroup>
                        <optgroup label="Spotify">
                            @foreach (var track in _settings.SpotifyTracks)
                            {
                                <option value="spotify:@track.Url">@track.Name</option>
                            }
                        </optgroup>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">🔊 Max Volume</label>
                    <input type="number" class="form-control bg-secondary text-light border-0"
                           min="0" max="100"
                           @bind-value="MaxVolume"
                           @bind-value:event="oninput" />
                    <div class="form-text text-light text-opacity-75">
                        Limits the highest volume that can be set from the main control panel.
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">🎨 Now Playing Gradient</label>
                    <div class="gradient-inputs d-flex flex-wrap gap-3">
                        <div class="gradient-input text-center">
                            <span class="text-uppercase small text-muted d-block">Start</span>
                            <input type="color" class="form-control form-control-color"
                                   @bind-value="GradientStartColor"
                                   @bind-value:event="oninput" />
                        </div>
                        <div class="gradient-input text-center">
                            <span class="text-uppercase small text-muted d-block">Middle</span>
                            <input type="color" class="form-control form-control-color"
                                   @bind-value="GradientMidColor"
                                   @bind-value:event="oninput" />
                        </div>
                        <div class="gradient-input text-center">
                            <span class="text-uppercase small text-muted d-block">End</span>
                            <input type="color" class="form-control form-control-color"
                                   @bind-value="GradientEndColor"
                                   @bind-value:event="oninput" />
                        </div>
                    </div>
                    <div class="gradient-preview mt-3" style="@GradientPreviewStyle"></div>
                </div>

                <div class="mb-3">
                    <label class="form-label">⏰ Start Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           @bind-value="StartTime"
                           @bind-value:event="oninput"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">🛑 Stop Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           @bind-value="StopTime"
                           @bind-value:event="oninput"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">📅 Server Time</label>
                    <input type="time" class="form-control bg-secondary text-light border-0"
                           disabled
                           @bind-value="TimeRightNow"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">📆 Active Days</label>
                    <div class="active-days-grid mt-2">
                        @foreach (var day in Enum.GetValues<DayOfWeek>().OrderBy(d => ((int)d + 6) % 7)) // Monday to Sunday
                        {
                            <div>
                                <input type="checkbox"
                                       class="btn-check"
                                       id="btncheck-@day"
                                       checked="@DaySelection[day]"
                                       @onchange="(e => OnDayChanged(day, e.Value))"/>
                                <label class="btn btn-outline-light btn-sm w-100" for="btncheck-@day">
                                    @day.ToString().Substring(0, 3)
                                </label>
                            </div>
                        }
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">🗓️ Daily Schedule</label>
                    <table class="table table-dark table-striped mb-0">
                        <thead>
                        <tr>
                            <th>Day</th>
                            <th>Start</th>
                            <th>Stop</th>
                            <th>Play</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var day in Enum.GetValues<DayOfWeek>().OrderBy(d => ((int)d + 6) % 7))
                        {
                            if (!_settings.DailySchedules.ContainsKey(day))
                                _settings.DailySchedules[day] = new DaySchedule();

                            var schedule = _settings.DailySchedules[day];
                            <tr>
                                <td>@day.ToString().Substring(0,3)</td>
                                <td>
                                    <input type="time" class="form-control bg-secondary text-light border-0"
                                           @bind-value="schedule.StartTime" @bind-value:event="oninput" @onchange="async _ => await SaveSettings()" />
                                </td>
                                <td>
                                    <input type="time" class="form-control bg-secondary text-light border-0"
                                           @bind-value="schedule.StopTime" @bind-value:event="oninput" @onchange="async _ => await SaveSettings()" />
                                </td>
                                  <td>
                                      <select class="form-select bg-secondary text-light border-0"
                                              value="@GetScheduleSelection(schedule)"
                                              @onchange="async e => await SetScheduleSelection(schedule, e.Value?.ToString())">
                                          <option value="">-- None --</option>
                                          <option value="randomStation">Random Station</option>
                                          <option value="randomSpotify">Random Spotify</option>
                                          <optgroup label="Stations">
                                              @foreach (var station in _settings.Stations)
                                              {
                                                  <option value="station:@station.Url">@station.Name</option>
                                              }
                                        </optgroup>
                                        <optgroup label="Spotify">
                                            @foreach (var track in _settings.SpotifyTracks)
                                            {
                                                <option value="spotify:@track.Url">@track.Name</option>
                                            }
                                        </optgroup>
                                    </select>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

            </div>
        }


@code {
    private SonosSettings? _settings;
    private TimeOnly TimeRightNow = TimeOnly.FromDateTime(DateTime.Now);
    private Dictionary<DayOfWeek, bool> DaySelection = new();
    private bool canEditIp;
    private bool _isRebooting;
    private string? _rebootAlertMessage;
    private string _rebootAlertCss = "alert-info";


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        canEditIp = user.IsInRole("admin") || user.IsInRole("superadmin");

        if (user.Identity?.IsAuthenticated ?? false)
        {
            _settings = await _uow.ISettingsRepo.GetSettings();

            // Default to weekdays if no ActiveDays are set
            if (_settings.ActiveDays == null || !_settings.ActiveDays.Any())
            {
                _settings.ActiveDays = Enum.GetValues<DayOfWeek>()
                    .Where(d => d != DayOfWeek.Saturday && d != DayOfWeek.Sunday)
                    .ToList();

                // Persist the updated default back to the config file
                await _uow.ISettingsRepo.WriteSettings(_settings);
            }

            // Build checkbox model
            foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                DaySelection[day] = _settings.ActiveDays.Contains(day);
            }
        }
    }


    private TimeOnly StartTime
    {
        get => _settings!.StartTime;
        set
        {
            _settings!.StartTime = value;
            SaveSettings();
            AddLog("Starttime Changed", $"Time: {value}");
        }
    }

    private TimeOnly StopTime
    {
        get => _settings!.StopTime;
        set
        {
            _settings!.StopTime = value;
            SaveSettings();
            AddLog("Stoptime Changed", $"Time: {value}");
        }
    }

      private string AutoPlaySelection
      {
          get
          {
              if (_settings!.AutoPlayRandomStation)
                  return "randomStation";
              if (_settings.AutoPlayRandomSpotify)
                  return "randomSpotify";
              if (!string.IsNullOrEmpty(_settings.AutoPlayStationUrl))
                  return $"station:{_settings.AutoPlayStationUrl}";
              if (!string.IsNullOrEmpty(_settings.AutoPlaySpotifyUrl))
                  return $"spotify:{_settings.AutoPlaySpotifyUrl}";
              return string.Empty;
          }
          set
          {
              _settings!.AutoPlayRandomStation = false;
              _settings.AutoPlayRandomSpotify = false;
              _settings.AutoPlayStationUrl = null;
              _settings.AutoPlaySpotifyUrl = null;
              if (!string.IsNullOrEmpty(value))
              {
                  if (value == "randomStation")
                      _settings.AutoPlayRandomStation = true;
                  else if (value == "randomSpotify")
                      _settings.AutoPlayRandomSpotify = true;
                  else
                  {
                      var parts = value.Split(':', 2);
                      if (parts[0] == "station")
                          _settings.AutoPlayStationUrl = parts[1];
                      else if (parts[0] == "spotify")
                          _settings.AutoPlaySpotifyUrl = parts[1];
                  }
              }
              SaveSettings();
          }
      }

    private int MaxVolume
    {
        get => Math.Clamp(_settings?.MaxVolume ?? 100, 0, 100);
        set
        {
            if (_settings is null)
                return;

            var clamped = Math.Clamp(value, 0, 100);

            if (_settings.MaxVolume == clamped)
                return;

            _settings.MaxVolume = clamped;

            if (_settings.Volume > clamped)
            {
                _settings.Volume = clamped;
            }

            SaveSettings();
            _ = AddLog("Max Volume Changed", $"Value: {clamped}");
        }
    }

    private string GradientStartColor
    {
        get => NormalizeColor(_settings?.NowPlayingGradientStartColor, SonosSettings.DefaultNowPlayingGradientStartColor);
        set
        {
            if (_settings is null)
                return;

            var normalized = NormalizeColor(value, SonosSettings.DefaultNowPlayingGradientStartColor);

            if (_settings.NowPlayingGradientStartColor == normalized)
                return;

            _settings.NowPlayingGradientStartColor = normalized;
            SaveSettings();
        }
    }

    private string GradientMidColor
    {
        get => NormalizeColor(_settings?.NowPlayingGradientMidColor, SonosSettings.DefaultNowPlayingGradientMidColor);
        set
        {
            if (_settings is null)
                return;

            var normalized = NormalizeColor(value, SonosSettings.DefaultNowPlayingGradientMidColor);

            if (_settings.NowPlayingGradientMidColor == normalized)
                return;

            _settings.NowPlayingGradientMidColor = normalized;
            SaveSettings();
        }
    }

    private string GradientEndColor
    {
        get => NormalizeColor(_settings?.NowPlayingGradientEndColor, SonosSettings.DefaultNowPlayingGradientEndColor);
        set
        {
            if (_settings is null)
                return;

            var normalized = NormalizeColor(value, SonosSettings.DefaultNowPlayingGradientEndColor);

            if (_settings.NowPlayingGradientEndColor == normalized)
                return;

            _settings.NowPlayingGradientEndColor = normalized;
            SaveSettings();
        }
    }

    private string GradientPreviewStyle => $"background: linear-gradient(135deg, {GradientStartColor} 0%, {GradientMidColor} 55%, {GradientEndColor} 100%);";

    private async Task SaveSettings()
    {
        _settings.ActiveDays = DaySelection
            .Where(kv => kv.Value)
            .Select(kv => kv.Key)
            .ToList();

        _settings.MaxVolume = Math.Clamp(_settings.MaxVolume, 0, 100);
        _settings.Volume = Math.Clamp(_settings.Volume, 0, _settings.MaxVolume);
        _settings.NowPlayingGradientStartColor = NormalizeColor(_settings.NowPlayingGradientStartColor, SonosSettings.DefaultNowPlayingGradientStartColor);
        _settings.NowPlayingGradientMidColor = NormalizeColor(_settings.NowPlayingGradientMidColor, SonosSettings.DefaultNowPlayingGradientMidColor);
        _settings.NowPlayingGradientEndColor = NormalizeColor(_settings.NowPlayingGradientEndColor, SonosSettings.DefaultNowPlayingGradientEndColor);

        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }

      private string GetScheduleSelection(DaySchedule schedule)
      {
          if (schedule.PlayRandomStation)
              return "randomStation";
          if (schedule.PlayRandomSpotify)
              return "randomSpotify";
          if (!string.IsNullOrEmpty(schedule.StationUrl))
              return $"station:{schedule.StationUrl}";
          if (!string.IsNullOrEmpty(schedule.SpotifyUrl))
              return $"spotify:{schedule.SpotifyUrl}";
          return string.Empty;
      }

      private async Task SetScheduleSelection(DaySchedule schedule, string? value)
      {
          schedule.PlayRandomStation = false;
          schedule.PlayRandomSpotify = false;
          schedule.StationUrl = null;
          schedule.SpotifyUrl = null;
          if (!string.IsNullOrEmpty(value))
          {
              if (value == "randomStation")
                  schedule.PlayRandomStation = true;
              else if (value == "randomSpotify")
                  schedule.PlayRandomSpotify = true;
              else
              {
                  var parts = value.Split(':', 2);
                  if (parts[0] == "station")
                      schedule.StationUrl = parts[1];
                  else if (parts[0] == "spotify")
                      schedule.SpotifyUrl = parts[1];
              }
          }
          await SaveSettings();
      }

    private async Task OnDayChanged(DayOfWeek dayKey, object? value)
    {
        bool isChecked = value is bool b && b;
        DaySelection[dayKey] = isChecked;

        await SaveSettings();
    }

    private static string NormalizeColor(string? value, string fallback)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return fallback;
        }

        var trimmed = value.Trim();

        if (!trimmed.StartsWith("#", System.StringComparison.Ordinal))
        {
            trimmed = $"#{trimmed.TrimStart('#')}";
        }

        if (trimmed.Length == 7)
        {
            return trimmed;
        }

        if (trimmed.Length == 4)
        {
            return $"#{trimmed[1]}{trimmed[1]}{trimmed[2]}{trimmed[2]}{trimmed[3]}{trimmed[3]}";
        }

        if (trimmed.Length > 7)
        {
            return trimmed.Substring(0, 7);
        }

        return fallback;
    }


    private string IP_Adress
    {
        get => _settings!.IP_Adress;
        set
        {
            if (!canEditIp)
                return;

            _settings!.IP_Adress = value;
            SaveSettings();
            AddLog("IP-Adress Changed", $"IP: {value}");
        }
    }

    private async Task SendRebootCommand()
    {
        if (_settings is null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(_settings.IP_Adress))
        {
            _rebootAlertCss = "alert-warning";
            _rebootAlertMessage = "Set a valid IP address before sending commands.";
            return;
        }

        _isRebooting = true;
        _rebootAlertMessage = null;

        try
        {
            await _uow.ISonosConnectorRepo.RebootDeviceAsync(_settings.IP_Adress);
            _rebootAlertCss = "alert-success";
            _rebootAlertMessage = "Reboot command sent to the speaker.";
            await AddLog("Reboot Command Sent", $"IP: {_settings.IP_Adress}");
        }
        catch (Exception ex)
        {
            _rebootAlertCss = "alert-danger";
            _rebootAlertMessage = $"Failed to send reboot command: {ex.Message}";
            try
            {
                await AddLog("Reboot Command Failed", $"IP: {_settings.IP_Adress}; Error: {ex.Message}");
            }
            catch
            {
            }
        }
        finally
        {
            _isRebooting = false;
        }
    }

    private async Task AddLog(string action, string? details = null)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name ?? "Unknown";

        var log = new LogEntry
        {
            Action = action,
            PerformedBy = username,
            Timestamp = DateTime.UtcNow,
            Details = details
        };

        Db.Logs.Add(log);
        await Db.SaveChangesAsync();
    }

}


<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .active-days-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 0.5rem;
    }

    .active-days-grid .btn {
        font-size: 0.85rem;
        padding: 0.45rem;
        font-weight: 500;
    }

    .btn-check + .btn {
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        font-size: 0.85rem;
    }

    @@media (max-width: 400px) {
    .col-4 {
        flex: 0 0 50%;
        max-width: 50%;
    }
    }

    .active-days-grid {
        display: grid;
        gap: 0.5rem;
        grid-template-columns: repeat(7, 1fr); /* exactly 7 buttons per row */
    }

    @@media (max-width: 576px) {
    .active-days-grid {
        grid-template-columns: repeat(3, 1fr); /* 3 per row on mobile */
    }
    }

    .active-days-grid .btn {
        font-size: 0.85rem;
        padding: 0.45rem;
        font-weight: 500;
        white-space: nowrap;
    }

    .gradient-inputs .form-control-color {
        width: 3rem;
        height: 3rem;
        padding: 0;
        border: none;
        background: transparent;
        cursor: pointer;
    }

    .gradient-input span {
        letter-spacing: 0.05em;
    }

    .gradient-preview {
        height: 2.5rem;
        border-radius: 0.75rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.35);
    }


</style>
