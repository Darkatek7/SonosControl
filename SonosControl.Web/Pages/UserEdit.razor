@page "/useredit"
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity
@using SonosControl.Web.Models
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>
<AuthorizeView Context="authContext">
    <Authorized>
        <div class="container p-4 shadow-lg rounded-4 bg-dark text-light" style="max-width: 600px;">
            <h3 class="mb-4 border-bottom pb-2">📝 Edit User</h3>
        
            @if (user == null)
            {
                <p class="text-muted">Loading...</p>
            }
            else
            {
                <EditForm Model="editModel" OnValidSubmit="HandleUpdate">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
        
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <InputText class="form-control bg-secondary text-light border-0" @bind-Value="editModel.FirstName" />
                    </div>
        
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <InputText class="form-control bg-secondary text-light border-0" @bind-Value="editModel.LastName" />
                    </div>
        
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText type="email" class="form-control bg-secondary text-light border-0" @bind-Value="editModel.Email" />
                    </div>
        
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText class="form-control bg-secondary text-light border-0" disabled @bind-Value="editModel.UserName" />
                    </div>
        
                    <div class="mb-3">
                        <label class="form-label">New Password (optional)</label>
                        <InputText type="password" class="form-control bg-secondary text-light border-0" @bind-Value="editModel.NewPassword" />
                    </div>
        
                    <div class="mb-3">
                        <label class="form-label">Confirm Password (optional)</label>
                        <InputText type="password" class="form-control bg-secondary text-light border-0" @bind-Value="editModel.ConfirmPassword" />
                    </div>
        
                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary px-4">Update</button>
                        <button type="button" class="btn btn-secondary px-4" @onclick="Cancel">Cancel</button>
                    </div>
                </EditForm>
        
                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert mt-3 @(statusMessage.Contains("success", StringComparison.OrdinalIgnoreCase) ? "alert-success" : "alert-danger")">
                        @statusMessage
                    </div>
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            You must be logged in to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string? UserId { get; set; }

    private ApplicationUser? user;
    private EditUserModel editModel = new();
    private string? statusMessage;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user_auth = authState.User;

        isAuthenticated = user_auth.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user_auth);
            UserId = appUser?.Id;
        }
        
        user = await UserManager.FindByIdAsync(UserId);

        if (user != null)
        {
            editModel = new EditUserModel
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                UserName = user.UserName
            };
        }
        else
        {
            statusMessage = "User not found.";
        }
    }

    private async Task HandleUpdate()
    {
        if (user == null)
        {
            statusMessage = "User not loaded.";
            return;
        }

        user.FirstName = editModel.FirstName;
        user.LastName = editModel.LastName;
        user.Email = editModel.Email;

        if (!string.IsNullOrWhiteSpace(editModel.NewPassword) && editModel.NewPassword != editModel.ConfirmPassword)
        {
            statusMessage = "Passwords do not match.";
            return;
        }

        var updateResult = await UserManager.UpdateAsync(user);

        if (!updateResult.Succeeded)
        {
            statusMessage = "Error updating user: " + string.Join(", ", updateResult.Errors.Select(e => e.Description));
            return;
        }

        if (!string.IsNullOrWhiteSpace(editModel.NewPassword))
        {
            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            var passResult = await UserManager.ResetPasswordAsync(user, token, editModel.NewPassword);

            if (!passResult.Succeeded)
            {
                statusMessage = "Password reset failed: " + string.Join(", ", passResult.Errors.Select(e => e.Description));
                return;
            }
        }

        statusMessage = "✅ User updated successfully.";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    public class EditUserModel
    {
        [Required] public string FirstName { get; set; } = string.Empty;
        [Required] public string LastName { get; set; } = string.Empty;
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;
        [Required] public string UserName { get; set; } = string.Empty;
        
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters.")]
        public string? NewPassword { get; set; }

        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}

<style>
    /* Match your dark theme form controls */
    .form-label {
        font-weight: 600;
        color: #bbbbbb;
    }

    .form-control {
        background-color: #333333;
        border: none;
        color: #e0e0e0;
        border-radius: 0.375rem;
        padding: 0.5rem 0.75rem;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        border-color: #007bff;
        background-color: #444444;
        color: #fff;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        color: #fff;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }
</style>
