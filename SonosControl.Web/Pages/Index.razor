@page "/"
@using System.Text.RegularExpressions
@using System.Threading
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "admin,operator,superadmin")]

<PageTitle>Sonos Control</PageTitle>


    @if (_settings is not null)
    {
            <div class="container p-4 bg-dark text-light rounded-4 shadow">
                <h3 class="mb-4 border-bottom pb-2">🎛️ Sonos Control Panel</h3>

                <!-- Playback Status -->
                <div class="mb-4">
                    <div class="@($"card playback-card shadow-sm border-0 rounded-4 text-white {(!_isPlaying ? "paused" : string.Empty)}")">
                        <div class="card-body">
                            <div class="d-flex flex-column gap-3">
                                <div class="d-flex flex-column flex-lg-row align-items-start gap-3">
                                    <div class="d-flex align-items-start gap-3 flex-grow-1">
                                        <div class="playback-icon">
                                            <i class="fa fa-music"></i>
                                        </div>
                                        <div class="playback-text">
                                            <h5 class="mb-1">@(_isPlaying ? "Now Playing" : "Playback Paused")</h5>
                                            <p class="mb-0">@(_isPlaying ? "Click to pause playback." : "Click to start playing music.")</p>
                                        </div>
                                    </div>
                                    @{
                                        var playbackToggleLabel = _isPlaying ? "Pause playback" : "Start playback";
                                    }
                                    <div class="playback-actions d-flex align-items-center flex-wrap gap-2 ms-auto">
                                        <button class="btn btn-light text-dark playback-action"
                                                @onclick="() => Play(!_isPlaying)"
                                                title="@playbackToggleLabel"
                                                aria-label="@playbackToggleLabel">
                                            <i class="fa @(_isPlaying ? "fa-pause" : "fa-play")"></i>
                                        </button>
                                        <button class="btn btn-outline-light playback-action"
                                                @onclick="OpenTimerModal"
                                                title="Schedule playback"
                                                aria-label="Schedule playback">
                                            <i class="fa fa-clock-o"></i>
                                        </button>
                                        @if (_isPlaying && _isSpotifyPlaying)
                                        {
                                            <button class="btn btn-outline-light playback-action"
                                                    @onclick="NextTrack"
                                                    title="Skip track"
                                                    aria-label="Skip track">
                                                <i class="fa fa-forward"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                                <div class="d-flex justify-content-end">
                                    <div class="playback-volume-control">
                                        <i class="fa fa-volume-up"></i>
                                        <input type="range"
                                               class="form-range playback-volume-slider"
                                               min="0" max="100"
                                               @bind-value="Volume"
                                               @bind-value:event="oninput"
                                               aria-label="Volume" />
                                        <span class="playback-volume-value">@($"{Volume}%")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (_timerEndTimeUtc is not null)
                {
                    var localStopTime = _timerEndTimeUtc.Value.ToLocalTime();
                    <div class="alert alert-info d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <strong>Timed Playback Active</strong>
                            <p class="mb-0 text-light-emphasis">@(_timerSelectionName ?? "Playback") will stop at @localStopTime.ToString("t").</p>
                        </div>
                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="CancelTimedPlayback">Cancel</button>
                    </div>
                }

                <!-- Now Playing Card -->
                <div class="card bg-secondary text-white mb-4 shadow-sm border-0 rounded-4">
                    <div class="card-body d-flex align-items-start gap-3">
                        <div class="display-5">🎵</div>
                        <div class="flex-grow-1 text-wrap">
                            <h5 class="mb-2">Currently Playing</h5>
                            <p class="mb-1 text-light-emphasis currently-playing-text text-break">
                                <strong>Station:</strong> @currentStationDisplay
                            </p>
                            <p class="mb-0 text-light-emphasis currently-playing-text text-break">
                                <strong>Track:</strong> @currentlyPlaying
                            </p>
                            @if (!string.IsNullOrWhiteSpace(trackProgress))
                            {
                                <p class="mb-0 text-light-emphasis currently-playing-text text-break">
                                    <strong>Time:</strong> @trackProgress
                                </p>
                            }
                        </div>
                    </div>
                </div>


                <!-- TuneIn Station Section -->
                <div class="form-section mb-5">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">📻 TuneIn Stations</h5>
                        <div class="d-flex align-items-center gap-2">
                            <button
                                class="btn btn-primary btn-sm px-2 py-1"
                                style="font-size: 0.75rem; width: auto; margin-top: 0;"
                                @onclick="ShuffleStation"
                                title="Shuffle stations"
                                aria-label="Shuffle stations">
                                🔀
                            </button>
                            <button
                                class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                                style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                                @onclick="() => isEditMode = !isEditMode">
                                <i class="fa fa-pencil"></i>
                                @(isEditMode ? "Done" : "Edit")
                            </button>
                        </div>
                    </div>

                    @if (isEditMode)
                    {
                        @if (!string.IsNullOrEmpty(addStationErrorMessage))
                        {
                            <div class="alert alert-danger">@addStationErrorMessage</div>
                        }

                        <div class="mb-3">
                            <h6>Add New Station</h6>
                            <div class="mb-2">
                                <label>Station Name</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newStationName" @bind:event="oninput"
                                       placeholder="Antenne Vorarlberg"/>
                            </div>
                            <div class="mb-2">
                                <label>Station URL</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newStationUrl" @bind:event="oninput"
                                       placeholder="web.radio.example.com/stream"
                                       pattern="@stationUrlPattern"/>
                            </div>
                            <button class="btn btn-success mt-2" @onclick="AddStation" disabled="@(!CanAddStation)">
                                Add Station
                            </button>
                        </div>

                        <ul class="list-group">
                            @foreach (var station in _stations)
                            {
                                <li class="list-group-item bg-dark text-white px-3 py-2">
                                    <div class="row align-items-center">
                                        <div class="col-10 text-truncate">
                                            @(station.Name.Length > 33 ? station.Name.Substring(0, 33) + "..." : station.Name)
                                        </div>
                                        <div class="col-2 text-end">
                                            <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                                    title="Remove"
                                                    @onclick="() => RemoveStation(station)">
                                                <i class="fa fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <select class="form-select bg-secondary text-light border-0 mt-2" @bind="selectedStation">
                            <option value="">-- Select Station --</option>
                            @foreach (var station in _stations)
                            {
                                <option
                                    value="@station.Url">@(station.Name.Length > 33 ? station.Name.Substring(0, 33) + "..." : station.Name)</option>
                            }
                        </select>
                    }
                </div>

                <!-- Spotify Tracks Section -->
                <div class="form-section">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">🎶 Spotify Tracks</h5>
                        <button
                            class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                            style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                            @onclick="() => isSpotifyEditMode = !isSpotifyEditMode">
                            <i class="fa fa-pencil"></i>
                            @(isEditMode ? "Done" : "Edit")
                        </button>
                    </div>

                    @if (isSpotifyEditMode)
                    {
                        @if (!string.IsNullOrEmpty(addTrackErrorMessage))
                        {
                            <div class="alert alert-danger">@addTrackErrorMessage</div>
                        }

                        <ul class="list-group mb-3">
                            @foreach (var track in _tracks)
                            {
                                <li class="list-group-item bg-dark text-white px-3 py-2">
                                    <div class="row align-items-center">
                                        <div class="col-10 text-truncate">
                                            @track.Name
                                        </div>
                                        <div class="col-2 text-end">
                                            <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                                    title="Remove"
                                                    @onclick="() => RemoveSpotifyTrack(track)">
                                                <i class="fa fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>

                        <div>
                            <div class="mb-2">
                                <label>Name</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newTrackName" @bind:event="oninput"
                                       placeholder="Crunchyroll Anime Essentials"/>
                            </div>
                            <div class="mb-2">
                                <label>Spotify URL</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newTrackUrl" @bind:event="oninput"
                                       placeholder="https://open.spotify.com/playlist/..."
                                       title="Valid Spotify link required"/>
                            </div>
                            <button class="btn btn-success mt-2" @onclick="AddNewSpotifyTrack"
                                    disabled="@(!CanAddTrack)">
                                Add Spotify Track
                            </button>
                        </div>
                    }
                    else
                    {
                        <select class="form-select bg-secondary text-light border-0 mt-2" @bind="selectedTrack">
                            <option value="">-- Select Spotify Track --</option>
                            @foreach (var track in _tracks)
                            {
                                <option
                                    value="@track.Url">@(track.Name.Length > 33 ? track.Name.Substring(0, 33) + "..." : track.Name)</option>
                            }
                        </select>
                    }
                </div>

                <hr/>

                <!-- Spotify URL Section -->
                <div class="form-section mb-5">
                    <h5 class="mb-2">🎧 Play Spotify URL</h5>
                    <input type="text" class="form-control bg-secondary text-light border-0"
                           @bind-value="spotifyUrl" @bind-value:event="oninput"
                           @onkeyup="HandleKeyPress" placeholder="Enter Spotify URL"/>
                </div>
            </div>
        }


        @if (isTimerModalOpen)
        {
            <div class="timer-modal-backdrop">
                <div class="timer-modal bg-dark text-light">
                    <div class="timer-modal-header mb-3">
                        <h5 class="timer-modal-title mb-0">⏱️ Timed Playback</h5>
                        <button type="button" class="timer-modal-close" @onclick="CloseTimerModal" title="Close">
                            <i class="fa fa-times"></i>
                            <span class="visually-hidden">Close</span>
                        </button>
                    </div>
                    <p class="text-light-emphasis small mb-3">Choose how long to play and what to listen to. Playback will stop automatically when the timer ends.</p>
                    <div class="mb-3">
                        <label class="form-label">Duration (minutes)</label>
                        <input type="number" min="1" class="form-control bg-secondary text-light border-0"
                               @bind-value="timerMinutes" @bind-value:event="oninput" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Station or Spotify</label>
                        <select class="form-select bg-secondary text-light border-0" @bind="timerSelection">
                            <option value="">-- Select Source --</option>
                            @if (_stations.Any())
                            {
                                <optgroup label="TuneIn Stations">
                                    @foreach (var station in _stations)
                                    {
                                        <option value="station|@station.Url">@(station.Name.Length > 40 ? station.Name.Substring(0, 40) + "..." : station.Name)</option>
                                    }
                                </optgroup>
                            }
                            @if (_tracks.Any())
                            {
                                <optgroup label="Spotify">
                                    @foreach (var track in _tracks)
                                    {
                                        <option value="spotify|@track.Url">@(track.Name.Length > 40 ? track.Name.Substring(0, 40) + "..." : track.Name)</option>
                                    }
                                </optgroup>
                            }
                        </select>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(timerErrorMessage))
                    {
                        <div class="alert alert-danger py-2">@timerErrorMessage</div>
                    }
                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-outline-light" @onclick="CloseTimerModal">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="StartTimedPlayback">Start Timer</button>
                    </div>
                </div>
            </div>
        }


@code {
    private SonosSettings? _settings;
    private bool _isPlaying;
    private bool _isSpotifyPlaying;
    private string? spotifyUrl;

    private int Volume
    {
        get => _settings?.Volume ?? 0;
        set
        {
            if (_settings is null)
            {
                return;
            }

            var clamped = Math.Clamp(value, 0, 100);

            if (_settings.Volume == clamped)
            {
                return;
            }

            _settings.Volume = clamped;
            _ = _uow.ISonosConnectorRepo.SetVolume(_settings.IP_Adress, clamped);
            _ = SaveSettings();
        }
    }

    private bool isAuthenticated;
    private bool isAdmin;
    private bool isOperator;

    private bool isEditMode = false;
    private string newStationName = "";
    private string newTrackName = "";
    private string newStationUrl = "";
    private string newTrackUrl = "";

    private bool isTimerModalOpen;
    private int timerMinutes = 60;
    private string? timerSelection;
    private string? timerErrorMessage;
    private CancellationTokenSource? _playbackTimerCts;
    private DateTime? _timerEndTimeUtc;
    private string? _timerSelectionName;


    private bool isSpotifyEditMode = false;

    private string currentStationUrl = "Loading...";
    private string currentStationDisplay = "Loading...";

    private string currentlyPlaying = "Loading...";
    private string currentyPlayingDisplay = "Loading...";
    private string trackProgress = "";
    private Timer? _stationUpdateTimer;
    private string? addStationErrorMessage;
    private string? addTrackErrorMessage;

    private List<TuneInStation> _stations =>
        (_settings?.Stations ?? new List<TuneInStation>())
        .OrderBy(s => s.Name)
        .ToList();

    private List<SpotifyObject> _tracks =>
        (_settings?.SpotifyTracks ?? new List<SpotifyObject>())
        .OrderBy(t => t.Name)
        .ToList();
    
    private string stationUrlPattern = @"^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(/[a-zA-Z0-9\-._~%!$&'()*+,;=:@/]*)*$";

    private List<string> queue = new();

    private async Task LoadCurrentStation()
    {
        if (_settings is not null)
        {
            var rawStationUrl = await _uow.ISonosConnectorRepo.GetCurrentStationAsync(_settings.IP_Adress);
            currentStationUrl = rawStationUrl.Replace("x-rincon-mp3radio://", "").Trim();

            if (currentStationUrl.Contains("spotify", StringComparison.OrdinalIgnoreCase))
            {
                currentStationDisplay = "Spotify";
                _isSpotifyPlaying = true;
            }
            else
            {
                // Try to match with saved stations first
                var matched = _stations.FirstOrDefault(s => currentStationUrl?.Contains(s.Url, StringComparison.OrdinalIgnoreCase) == true);
                if (matched != null)
                {
                    currentStationDisplay = matched.Name;
                }
                else
                {
                    currentStationDisplay = currentStationUrl;
                }

                _isSpotifyPlaying = false;
            }

            currentlyPlaying = await _uow.ISonosConnectorRepo.GetCurrentTrackAsync(_settings.IP_Adress);
            var progress = await _uow.ISonosConnectorRepo.GetTrackProgressAsync(_settings.IP_Adress);

            if (progress.Duration == TimeSpan.Zero)
            {
                trackProgress = progress.Position == TimeSpan.Zero
                    ? string.Empty
                    : $"{progress.Position:mm\\:ss}";
            }
            else
            {
                trackProgress = $"{progress.Position:mm\\:ss} / {progress.Duration:mm\\:ss}";
            }

            await InvokeAsync(StateHasChanged);
        }
    }


    private string selectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                OnStationChanged(); // Call the station change handler
            }
        }
    }

    private bool CanAddStation => !string.IsNullOrWhiteSpace(newStationName) && !string.IsNullOrWhiteSpace(newStationUrl);
    private bool CanAddTrack => !string.IsNullOrWhiteSpace(newTrackName) && !string.IsNullOrWhiteSpace(newTrackUrl);

    private string _selectedStation;

    private string selectedTrack
    {
        get => _selectedTrack;
        set
        {
            if (_selectedTrack != value)
            {
                _selectedTrack = value;
                OnTrackChanged(); // Call the station change handler
            }
        }
    }

    private string _selectedTrack;

    private async Task OnStationChanged()
    {
        if (!string.IsNullOrEmpty(selectedStation))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings!.IP_Adress, selectedStation);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            await AddLog("Station Changed", $"URL: {selectedStation}");
        }
    }

    private async Task OnTrackChanged()
    {
        if (!string.IsNullOrEmpty(selectedTrack) && _tracks.Any(s => s.Url == selectedTrack))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings!.IP_Adress, selectedTrack);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            await AddLog("Spotify Track Changed", $"URL: {selectedTrack}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(spotifyUrl))
            {
                await PlaySpotifyTrack(spotifyUrl);
                spotifyUrl = string.Empty; // Clear the input field after submission
            }
        }
    }

    private async Task PlaySpotifyTrack(string url)
    {
        if (_settings is not null)
        {
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings.IP_Adress, url);
            await AddLog("Spotify URL Played", url);
        }
    }

    private async Task PreviousTrack()
    {
        await _uow.ISonosConnectorRepo.PreviousTrack(_settings!.IP_Adress);
        await AddLog("Previous Track");
    }

    private async Task NextTrack()
    {
        await _uow.ISonosConnectorRepo.NextTrack(_settings!.IP_Adress);
        await AddLog("Next Track");
    }

    private async Task LoadQueue()
    {
        if (currentStationDisplay == "Spotify") // Check if playing Spotify
        {
            //var currentTrack = await _uow.ISonosConnectorRepo.GetCurrentTrack(_settings!.IP_Adress);
            //queue = new List<string> { currentTrack };
        }
        else
        {
            queue = await _uow.ISonosConnectorRepo.GetQueue(_settings!.IP_Adress);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void OpenTimerModal()
    {
        timerErrorMessage = null;

        if (timerMinutes <= 0)
        {
            timerMinutes = 60;
        }

        isTimerModalOpen = true;
    }

    private void CloseTimerModal()
    {
        isTimerModalOpen = false;
        timerErrorMessage = null;
    }

    private async Task StartTimedPlayback()
    {
        timerErrorMessage = null;

        if (_settings is null)
        {
            timerErrorMessage = "Settings are not loaded.";
            return;
        }

        if (timerMinutes <= 0)
        {
            timerErrorMessage = "Please enter a duration greater than zero.";
            return;
        }

        if (string.IsNullOrWhiteSpace(timerSelection))
        {
            timerErrorMessage = "Please select a station or Spotify source.";
            return;
        }

        var parts = timerSelection.Split('|', 2, StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length != 2)
        {
            timerErrorMessage = "Invalid selection.";
            return;
        }

        var selectionType = parts[0];
        var selectionValue = parts[1];
        string selectionName;
        string logSource;

        try
        {
            if (selectionType == "station")
            {
                var station = _stations.FirstOrDefault(s => s.Url == selectionValue);
                selectionName = station?.Name ?? selectionValue;
                logSource = $"Station: {selectionName}";
                await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings.IP_Adress, selectionValue);
                _isSpotifyPlaying = false;
            }
            else if (selectionType == "spotify")
            {
                var track = _tracks.FirstOrDefault(t => t.Url == selectionValue);
                selectionName = track?.Name ?? selectionValue;
                logSource = $"Spotify: {selectionName}";
                await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings.IP_Adress, selectionValue);
                _isSpotifyPlaying = true;
            }
            else
            {
                timerErrorMessage = "Invalid source selected.";
                return;
            }

            await _uow.ISonosConnectorRepo.StartPlaying(_settings.IP_Adress);
            _isPlaying = true;

            var minutes = timerMinutes;
            var ip = _settings.IP_Adress;

            _playbackTimerCts?.Cancel();
            _playbackTimerCts?.Dispose();
            _playbackTimerCts = null;

            await AddLog("Timed Playback Started", $"{logSource} ({minutes} minutes)");

            _timerSelectionName = selectionName;
            _timerEndTimeUtc = DateTime.UtcNow.AddMinutes(minutes);

            isTimerModalOpen = false;
            timerSelection = null;
            timerMinutes = 60;

            _playbackTimerCts = new CancellationTokenSource();
            var cts = _playbackTimerCts;

            _ = Task.Run(async () =>
            {
                try
                {
                    await Task.Delay(TimeSpan.FromMinutes(minutes), cts.Token);
                    await InvokeAsync(async () =>
                    {
                        await _uow.ISonosConnectorRepo.PausePlaying(ip);
                        _isPlaying = false;
                        _timerEndTimeUtc = null;
                        _timerSelectionName = null;
                        await AddLog("Timed Playback Completed", $"{logSource} ({minutes} minutes)");
                        StateHasChanged();
                    });
                }
                catch (TaskCanceledException)
                {
                }
                finally
                {
                    if (ReferenceEquals(_playbackTimerCts, cts))
                    {
                        _playbackTimerCts = null;
                    }

                    cts.Dispose();
                }
            });
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            timerErrorMessage = "Failed to start timed playback.";
        }
    }

    private async Task CancelTimedPlayback()
    {
        var cts = _playbackTimerCts;
        if (cts is not null)
        {
            _playbackTimerCts = null;
            cts.Cancel();
            cts.Dispose();
        }

        if (_timerEndTimeUtc is not null || _timerSelectionName is not null)
        {
            var stopInfo = _timerEndTimeUtc?.ToLocalTime().ToString("t");
            var details = _timerSelectionName ?? "Timed playback";
            if (!string.IsNullOrEmpty(stopInfo))
            {
                details += $" (scheduled stop at {stopInfo})";
            }

            await AddLog("Timed Playback Cancelled", details);
        }

        _timerEndTimeUtc = null;
        _timerSelectionName = null;
        isTimerModalOpen = false;
        timerErrorMessage = null;
    }

    private async Task AddLog(string action, string? details = null)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name ?? "Unknown";

        var log = new LogEntry
        {
            Action = action,
            PerformedBy = username,
            Timestamp = DateTime.UtcNow,
            Details = details
        };

        Db.Logs.Add(log);
        await Db.SaveChangesAsync();
    }

    private async Task ClearQueue()
    {
        await _uow.ISonosConnectorRepo.ClearQueue(_settings!.IP_Adress);
        queue.Clear();
        await AddLog("Queue Cleared");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/auth/login?", true);
            return;
        }

        // Load your settings and initialize page as before
        _settings = await _uow.ISettingsRepo.GetSettings();

        if (_settings!.IP_Adress is "10.0.0.0")
            return;

        _settings!.Volume = await _uow.ISonosConnectorRepo.GetVolume(_settings!.IP_Adress);
        await SaveSettings();
        _isPlaying = await IsPlaying();
        _stationUpdateTimer = new Timer(async _ => await LoadCurrentStation(), null, 0, 1000);
    }

    private async Task Play(bool play)
    {
        if (play)
        {
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            _isPlaying = true;
            await AddLog("Playback Started");
        }
        else
        {
            await _uow.ISonosConnectorRepo.PausePlaying(_settings!.IP_Adress);
            _isPlaying = false;
            await AddLog("Playback Started");
        }

        //_isPlaying = await IsPlaying();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> IsPlaying()
    {
        return await _uow.ISonosConnectorRepo.IsPlaying(_settings!.IP_Adress);
    }

    private async Task SaveSettings()
    {
        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }

    private async Task AddStation()
    {
        if (string.IsNullOrWhiteSpace(newStationName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newStationUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }

        await AddLog("Station Added", $"{newStationName} ({newStationUrl})");
        addStationErrorMessage = null;

        _settings ??= new SonosSettings();
        _settings.Stations ??= new List<TuneInStation>();
        _settings.Stations.Add(new TuneInStation { Name = newStationName, Url = newStationUrl });
        newStationName = newStationUrl = "";

        await SaveSettings();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveStation(TuneInStation station)
    {
        if (_settings == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete station '{station.Name}'?");
        if (!confirmed) return;

        _settings.Stations?.Remove(station);
        await SaveSettings();

        await AddLog("Station Removed", $"{station.Name} ({station.Url})");
        await InvokeAsync(StateHasChanged);
    }

    // Remove Spotify track
    private async Task RemoveSpotifyTrack(SpotifyObject track)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete track '{track.Name}'?");
        if (!confirmed) return;

        _settings.SpotifyTracks.Remove(track);
        // You may also want to save the settings after removing it
        Console.WriteLine($"Removed track: {track.Name}");
        await SaveSettings();

        await AddLog("Spotify Track Removed", $"{track.Name} ({track.Url})");
        await InvokeAsync(StateHasChanged);
    }

    // Add a new Spotify track
    private async Task AddNewSpotifyTrack()
    {
        if (string.IsNullOrWhiteSpace(newTrackName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTrackUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }

        // Example: Open a form to add a new track
        _settings.SpotifyTracks.Add(new SpotifyObject() { Name = newTrackName, Url = newTrackUrl });
        Console.WriteLine("Added new Spotify track.");

        await SaveSettings();
        await AddLog("Spotify Track Added", $"{newTrackName} ({newTrackUrl})");

        addStationErrorMessage = null;
        newTrackName = newTrackUrl = "";

        await InvokeAsync(StateHasChanged);
    }

    private Random _random = new();

    private async Task ShuffleStation()
    {
        if (_settings?.Stations != null && _settings.Stations.Any())
        {
            var randomStation = _settings.Stations[_random.Next(_settings.Stations.Count)].Url;
            selectedStation = randomStation; // This triggers OnStationChanged()
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings.IP_Adress, selectedStation);
            await AddLog("Shuffled Station", $"Selected: {selectedStation}");
        }
    }

}

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        border-radius: 5px;
    }

    .playback-card {
        background: linear-gradient(135deg, #1db954 0%, #1aa34a 45%, #1e90ff 100%);
        border: none;
        color: #ffffff;
    }

    .playback-card.paused {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    }

    .playback-card .card-body {
        padding: 1.75rem;
    }

    .playback-icon {
        width: 3.25rem;
        height: 3.25rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.25);
        box-shadow: 0 0.65rem 1.2rem rgba(0, 0, 0, 0.25);
        font-size: 1.35rem;
        color: #ffffff;
    }

    .playback-text h5 {
        font-weight: 600;
    }

    .playback-text p {
        color: rgba(255, 255, 255, 0.8);
    }

    .playback-controls {
        min-width: 260px;
    }

    .playback-control-row {
        gap: 0.75rem;
        align-items: center;
    }

    .playback-action {
        width: auto;
        min-width: 2.75rem;
        padding: 0.5rem 0.9rem;
        border-radius: 0.85rem;
        transition: transform 0.15s ease, box-shadow 0.15s ease;
        box-shadow: 0 0.6rem 1.2rem rgba(0, 0, 0, 0.25);
    }

    .playback-actions {
        justify-content: flex-end;
    }

    .playback-action:hover,
    .playback-action:focus {
        transform: translateY(-1px);
        box-shadow: 0 0.75rem 1.3rem rgba(0, 0, 0, 0.3);
    }

    .playback-volume-control {
        display: inline-flex;
        align-items: center;
        justify-content: flex-end;
        flex-wrap: wrap;
        gap: 0.65rem;
        padding: 0.45rem 0.9rem;
        border-radius: 999px;
        background: rgba(0, 0, 0, 0.25);
        border: 1px solid rgba(255, 255, 255, 0.18);
        box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.1);
    }

    .playback-volume-control i {
        font-size: 1rem;
        color: rgba(255, 255, 255, 0.85);
    }

    .playback-volume-slider {
        width: 160px;
        min-width: 120px;
        flex: 1;
        background: transparent;
        margin: 0;
        accent-color: #ffffff;
    }

    .playback-volume-slider::-webkit-slider-runnable-track {
        height: 0.35rem;
        border-radius: 999px;
        background: rgba(255, 255, 255, 0.6);
    }

    .playback-volume-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 0.95rem;
        height: 0.95rem;
        margin-top: -0.3rem;
        border-radius: 50%;
        background: #ffffff;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);
        border: none;
    }

    .playback-volume-slider::-moz-range-track {
        height: 0.35rem;
        border-radius: 999px;
        background: rgba(255, 255, 255, 0.6);
    }

    .playback-volume-slider::-moz-range-thumb {
        width: 0.95rem;
        height: 0.95rem;
        border-radius: 50%;
        background: #ffffff;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);
        border: none;
    }

    .playback-volume-slider:focus {
        outline: none;
    }

    .playback-volume-value {
        font-weight: 600;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.9);
        min-width: 3rem;
        text-align: right;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    input.form-control.bg-secondary::placeholder {
        color: rgba(255, 255, 255, 0.6); /* soft white */
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }

    .station-remove-btn,
    .spotify-remove-btn {
        padding: 2px 8px;
        font-size: 0.75rem;
        line-height: 1;
        width: auto;
        white-space: nowrap;
    }

    .currently-playing-text {
        word-break: break-word;
        overflow-wrap: break-word;
        font-size: 0.9rem;
        max-width: 100%;
    }

    @@media (max-width: 576px) {
        .playback-card .card-body {
            padding: 1.25rem;
        }

        .playback-controls {
            min-width: 0;
            width: 100%;
            align-items: stretch !important;
        }

        .playback-control-row {
            justify-content: flex-start !important;
        }

        .playback-volume-control {
            width: 100%;
            justify-content: space-between;
        }

        .playback-volume-slider {
            min-width: 0;
            flex: 1;
        }

        .playback-volume-value {
            min-width: 0;
            text-align: right;
        }

        .currently-playing-text {
            font-size: 0.85rem;
        }
    }

    .currently-playing-text {
        word-break: break-word;
        overflow-wrap: anywhere;
        white-space: normal; /* allow wrapping */
        overflow: visible;   /* let it grow naturally */
        text-overflow: unset; /* remove ellipsis */
        max-width: 100%;
        font-size: 0.9rem;
    }

    .timer-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.65);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        padding: 1rem;
    }

    .timer-modal {
        width: 100%;
        max-width: 420px;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.35);
    }
  
    .timer-modal-header {
        position: relative;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .timer-modal-title {
        flex: 1;
        font-size: 1.1rem;
    }

    .timer-modal-close {
        margin-left: auto;
        background: none;
        border: none;
        color: #bfbfbf;
        font-size: 1.1rem;
        line-height: 1;
        padding: 0.25rem;
        border-radius: 0.4rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .timer-modal-close:hover,
    .timer-modal-close:focus {
        color: #ffffff;
        background-color: rgba(255, 255, 255, 0.12);
    }

    .timer-modal-close:focus {
        outline: 2px solid rgba(255, 255, 255, 0.35);
        outline-offset: 2px;
    }


    .timer-modal .form-control,
    .timer-modal .form-select {
        background-color: #2b2b2b;
        border: 1px solid #444;
        color: #f5f5f5;
    }

    .timer-modal .form-control:focus,
    .timer-modal .form-select:focus {
        box-shadow: 0 0 0 0.2rem rgba(32, 201, 151, 0.25);
        border-color: #20c997;
    }

    .timer-modal .btn-outline-light {
        border-color: rgba(255, 255, 255, 0.4);
    }


</style>
