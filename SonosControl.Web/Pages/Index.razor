@page "/"

<PageTitle>Sonos Control</PageTitle>

@if (_settings is not null)
{
    <div class="container">
        <div class="header-display">Sonos Control Panel</div>
        <div class="row">
            @if (_isPlaying)
            {
                <div class="col-12">
                    <div class="alert alert-success" role="alert">
                        <strong>Is Playing</strong>
                        <p class="text-muted">Click the button to manually stop playing music.</p>
                        <button class="btn btn-danger" @onclick=@(async ()=>await Play(false))><i class="fa fa-pause"></i> Pause</button>
                    </div>
                </div>
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-warning" role="alert">
                        <strong>Playing is paused</strong>
                        <p class="text-muted">Click the button to manually start playing music.</p>
                        <button class="btn btn-success" @onclick=@(async ()=>await Play(true))><i class="fa fa-play"></i> Play</button>
                    </div>
                </div>
            }
        </div>

        <div class="form-section">
            <h5>Speaker Settings</h5>
            <div class="form-group">
                <label>IP Address</label>
                <input type="text" class="form-control" @bind-value="IP_Adress" @bind-value:event="oninput" placeholder="Enter IP Address" pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$" />
            </div>
            <div class="form-group">
                <label>Volume</label>
                <input type="number" class="form-control" max="100" min="1" @bind-value="Volume" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Start Time</label>
                <input type="time" class="form-control" @bind-value="StartTime" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Stop Time</label>
                <input type="time" class="form-control" @bind-value="StopTime" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Server Time</label>
                <input type="time" class="form-control" disabled @bind-value="TimeRightNow" />
            </div>
        </div>

        <!-- Dropdown for TuneIn Stations -->
        <div class="form-section">
            <h5>Select TuneIn Station</h5>
            <select class="form-select" @bind="selectedStation">
                <option value="">--Select Station--</option>
                @foreach (var station in _stations)
                {
                    <option value="@station.Value">@station.Key</option>
                }
            </select>
        </div>

        <!-- Currently Playing Station -->
        <div class="form-section">
            <h5>Currently Playing Station</h5>
            <p>@currentStationDisplay</p>
        </div>

        <!-- Spotify URL Input Field -->
        <div class="form-section">
            <h5>Spotify URL</h5>
            <input type="text" class="form-control" @bind-value="spotifyUrl" @bind-value:event="oninput" @onkeyup="HandleKeyPress" placeholder="Enter Spotify URL" />
        </div>
    </div>
}

@code {
    private SonosSettings? _settings;
    private bool _isPlaying;
    
    private string? spotifyUrl;

    private string currentStationUrl = "Loading...";
    private string currentStationDisplay = "Loading...";
    private Timer? _stationUpdateTimer;

    private async Task LoadCurrentStation()
    {
        if (_settings is not null)
        {
            // Fetch the current station URL
            var rawStationUrl = await _uow.ISonosConnectorRepo.GetCurrentStationAsync(_settings.IP_Adress);

            // Remove the "x-rincon-mp3radio://" prefix if it exists
            currentStationUrl = rawStationUrl.Replace("x-rincon-mp3radio://", "");

            // Check if the URL contains "spotify" and set the display name accordingly
            if (currentStationUrl.Contains("spotify"))
            {
                currentStationDisplay = "Spotify";
            }
            else
            {
                // Lookup the station name from the dictionary or fall back to the stream URL
                currentStationDisplay = _stations.FirstOrDefault(s => s.Value == currentStationUrl).Key ?? currentStationUrl;
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private string selectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                OnStationChanged();  // Call the station change handler
            }
        }
    }

    private string _selectedStation;

    private async Task OnStationChanged()
    {
        if (!string.IsNullOrEmpty(selectedStation) && _stations.ContainsValue(selectedStation))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings!.IP_Adress, selectedStation);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);

        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(spotifyUrl))
            {
                await PlaySpotifyTrack(spotifyUrl);
                spotifyUrl = string.Empty; // Clear the input field after submission
            }
        }
    }

    private async Task PlaySpotifyTrack(string url)
    {
        if (_settings is not null)
        {
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings.IP_Adress, url);
        }
    }

    private Dictionary<string, string> _stations = new()
    {
        { "Antenne Vorarlberg", "web.radio.antennevorarlberg.at/av-live/stream/mp3" },
        { "Radio V", "orf-live.ors-shoutcast.at/vbg-q2a" },
        { "Rock Antenne Bayern", "stream.rockantenne.bayern/80er-rock/stream/mp3" },
        { "Kronehit", "onair.krone.at/kronehit.mp3"},
        { "Ö3", "orf-live.ors-shoutcast.at/oe3-q2a"},
        { "Radio Paloma", "www3.radiopaloma.de/RP-Hauptkanal.pls"}
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _settings = await _uow.ISettingsRepo.GetSettings();

        if (_settings!.IP_Adress is "10.0.0.0")
            return;

        _settings!.Volume = await _uow.ISonosConnectorRepo.GetVolume(_settings!.IP_Adress);
        await SaveSettings();
        _isPlaying = await IsPlaying();
        _stationUpdateTimer = new Timer(async _ => await LoadCurrentStation(), null, 0, 5000);
    }

    private async Task Play(bool play)
    {
        if (play)
        {
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
        }
        else
        {
            await _uow.ISonosConnectorRepo.PausePlaying(_settings!.IP_Adress);
        }

        _isPlaying = await IsPlaying();
        StateHasChanged();
    }

    private async Task<bool> IsPlaying()
    {
        return await _uow.ISonosConnectorRepo.IsPlaying(_settings!.IP_Adress);
    }

    private int Volume
    {
        get => _settings!.Volume;
        set
        {
            _settings!.Volume = value;
            _uow.ISonosConnectorRepo.SetVolume(_settings!.IP_Adress, value);
            SaveSettings();
        }
    }

    private TimeOnly StartTime
    {
        get => _settings!.StartTime;
        set
        {
            _settings!.StartTime = value;
            SaveSettings();
        }
    }

    private TimeOnly StopTime
    {
        get => _settings!.StopTime;
        set
        {
            _settings!.StopTime = value;
            SaveSettings();
        }
    }

    private TimeOnly TimeRightNow = TimeOnly.FromDateTime(DateTime.Now);

    private string IP_Adress
    {
        get => _settings!.IP_Adress;
        set
        {
            _settings!.IP_Adress = value;
            SaveSettings();
        }
    }

    private async Task SaveSettings()
    {
        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }
}

<style>
    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .header-display {
        color: #333;
        font-weight: bold;
        font-size: 24px;
        text-align: center;
        margin-bottom: 20px;
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
    }

    .form-control {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
    }

    .form-select {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .btn {
        width: 100%;
        margin-top: 10px;
    }
</style>
