@page "/"
@using System.Text.RegularExpressions

<PageTitle>Sonos Control</PageTitle>

@if (_settings is not null)
{
    <div class="container">
        <div class="header-display">Sonos Control Panel</div>
        <div class="row">
            @if (_isPlaying)
            {
                <div class="col-12">
                    <div class="alert alert-success" role="alert">
                        <strong>Is Playing</strong>
                        <p class="text-muted">Click the button to manually stop playing music.</p>

                        <div class="d-flex align-items-center">
                            <button class="btn btn-danger me-2" @onclick="@((async () => await Play(false)))"><i class="fa fa-pause"></i> Pause</button>
                            @if (_isSpotifyPlaying)
                            {
                                <button class="btn btn-primary" style="flex-shrink: 0; width: 80px;" @onclick="NextTrack"><i class="fa fa-forward"></i></button>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-warning" role="alert">
                        <strong>Playing is paused</strong>
                        <p class="text-muted">Click the button to manually start playing music.</p>
                        <button class="btn btn-success" @onclick=@(async ()=>await Play(true))><i class="fa fa-play"></i> Play</button>
                    </div>
                </div>
            }
        </div>


        <div class="form-section">
            <h5>Speaker Settings</h5>
            <div class="form-group">
                <label>IP Address</label>
                <input type="text" class="form-control" @bind-value="IP_Adress" @bind-value:event="oninput" placeholder="Enter IP Address" pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$" />
            </div>
            <div class="form-group">
                <label>Volume</label>
                <input type="number" class="form-control" max="100" min="1" @bind-value="Volume" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Start Time</label>
                <input type="time" class="form-control" @bind-value="StartTime" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Stop Time</label>
                <input type="time" class="form-control" @bind-value="StopTime" @bind-value:event="oninput" />
            </div>
            <div class="form-group">
                <label>Server Time</label>
                <input type="time" class="form-control" disabled @bind-value="TimeRightNow" />
            </div>
        </div>

        <!-- TuneIn Station Control Section -->
        <!-- TuneIn Station Control Section -->
        <div class="form-section">
            <!-- Title and Edit Button Inline -->
            <div class="d-flex align-items-center justify-content-between mb-2">
                <h5 class="mb-0">Select TuneIn Station</h5>
                <button
                    class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                    style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                    @onclick="() => isEditMode = !isEditMode">
                    <i class="fa fa-pencil"></i>
                    @(isEditMode ? "Done" : "Edit")
                </button>
            </div>

    @if (isEditMode)
    {
        <!-- Add Station Form -->
        <div class="form-section mb-3">
            @if (!string.IsNullOrEmpty(addStationErrorMessage))
            {
                <div class="alert alert-danger mt-2" role="alert">
                    @addStationErrorMessage
                </div>
            }

            <h6>Add New Station</h6>
            <div class="form-group">
                <label>Station Name</label>
                <input class="form-control" 
                       @bind="newStationName" 
                       @bind:event="oninput"
                       placeholder="Antenne Vorarlberg"/>
            </div>
            <div class="form-group">
                <label>Station URL</label>
                <input class="form-control"
                       @bind="newStationUrl"
                       @bind:event="oninput"
                       placeholder="e.g. web.radio.antennevorarlberg.at/av-live/stream/mp3"
                       pattern="@stationUrlPattern"
                       title="Enter a valid station URL like web.radio.antennevorarlberg.at/av-live/stream/mp3"/>
            </div>
            <button class="btn btn-success mt-2"
                    @onclick="AddStation"
                    disabled="@(!CanAddStation)">
                Add Station
            </button>
        </div>

        <!-- Station List with Compact Remove Button -->
        <ul class="list-group">
            @foreach (var station in _stations)
            {
                <li class="list-group-item bg-dark text-white px-3 py-2">
                    <div class="row align-items-center">
                        <div class="col-10 text-truncate">
                            @station.Name
                        </div>
                        <div class="col-2 text-end">
                            <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                    title="Remove"
                                    @onclick="() => RemoveStation(station)">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <!-- Regular Dropdown for Selection -->
        <select class="form-select mt-2" @bind="selectedStation">
            <option value="">--Select Station--</option>
            @foreach (var station in _stations)
            {
                <option value="@station.Url">@station.Name</option>
            }
        </select>
    }

</div>

        <!-- Currently Playing Station -->
        <div class="form-section">
            <h5>Currently Playing</h5>
            <p>@currentStationDisplay</p>
        </div>

        <!-- Spotify URL Input Field -->
        <div class="form-section">
            <h5>Play Spotify URL</h5>
            <input type="text" class="form-control" @bind-value="spotifyUrl" @bind-value:event="oninput" @onkeyup="HandleKeyPress" placeholder="Enter Spotify URL" />
        </div>
        
        
        <!-- Title and Edit Button Inline -->
        <div class="d-flex align-items-center justify-content-between mb-2">
            <h5 class="mb-0">Spotify Tracks</h5>
            <button
                class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                @onclick="() => isSpotifyEditMode = !isSpotifyEditMode">
                <i class="fa fa-pencil"></i>
                @(isEditMode ? "Done" : "Edit")
            </button>
        </div>

        @if (isSpotifyEditMode)
        {
            <ul class="list-group">
                <ul class="list-group">
                    @foreach (var track in _tracks)
                    {
                        <li class="list-group-item bg-dark text-white px-3 py-2">
                            <div class="row align-items-center">
                                <div class="col-10 text-truncate">
                                    @track.Name
                                </div>
                                <div class="col-2 text-end">
                                    <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                            title="Remove"
                                            @onclick="() => RemoveSpotifyTrack(track)">
                                        <i class="fa fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </ul>
            
            <div class="form-section mb-3">
                @if (!string.IsNullOrEmpty(addStationErrorMessage))
                {
                    <div class="alert alert-danger mt-2" role="alert">
                        @addTrackErrorMessage
                    </div>
                }
                <hr/>
                <div class="form-group">
                    <label>Name</label>
                    <input class="form-control" 
                           @bind="newTrackName" 
                           @bind:event="oninput"
                           placeholder="Crunchyroll Anime Essentials"/>
                </div>
                <div class="form-group">
                    <label>Spotify URL</label>
                    <input class="form-control"
                           @bind="newTrackUrl"
                           @bind:event="oninput"
                           placeholder="e.g. https://open.spotify.com/playlist/37i9dQZF1DXcUJyJZNonKS"
                           title="Enter a valid station URL like https://open.spotify.com/playlist/37i9dQZF1DXcUJyJZNonKS"/>
                </div>
                <button class="btn btn-success mt-2"
                        @onclick="AddNewSpotifyTrack"
                        disabled="@(!CanAddTrack)">
                    Add Spotify Object
                </button>
            </div>
        }
        else
        {
            <!-- Regular Dropdown for Selection -->
            <select class="form-select mt-2" @bind="selectedTrack">
                <option value="">--Select Spotify Object--</option>
                @foreach (var track in _tracks)
                {
                    <option value="@track.Url">@track.Name</option>
                }
            </select>
        }

    </div>
}


@code {
    private SonosSettings? _settings;
    private bool _isPlaying;
    private bool _isSpotifyPlaying;
    private string? spotifyUrl;
    
    private bool isEditMode = false;
    private string newStationName = "";
    private string newTrackName = "";
    private string newStationUrl = "";
    private string newTrackUrl = "";
    
    
    private bool isSpotifyEditMode = false;
    
    private string currentStationUrl = "Loading...";
    private string currentStationDisplay = "Loading...";
    private Timer? _stationUpdateTimer;
    private string? addStationErrorMessage;
    private string? addTrackErrorMessage;
    
    private string stationUrlPattern = @"^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(/[a-zA-Z0-9\-._~%!$&'()*+,;=:@/]*)*$";
    
    private List<string> queue = new ();

    private async Task LoadCurrentStation()
    {
        if (_settings is not null)
        {
            var rawStationUrl = await _uow.ISonosConnectorRepo.GetCurrentStationAsync(_settings.IP_Adress);
            currentStationUrl = rawStationUrl.Replace("x-rincon-mp3radio://", "");

            if (currentStationUrl.Contains("spotify"))
            {
                currentStationDisplay = "Spotify";
                _isSpotifyPlaying = true;
            }
            else
            {
                currentStationDisplay = _stations.FirstOrDefault(s => s.Url == currentStationUrl)?.Name ?? currentStationUrl;
                _isSpotifyPlaying = false;
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private string selectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                OnStationChanged();  // Call the station change handler
            }
        }
    }
    private bool CanAddStation => !string.IsNullOrWhiteSpace(newStationName) && !string.IsNullOrWhiteSpace(newStationUrl);
    private bool CanAddTrack => !string.IsNullOrWhiteSpace(newTrackName) && !string.IsNullOrWhiteSpace(newTrackUrl);

    private string _selectedStation;
    
    
    private string selectedTrack
    {
        get => _selectedTrack;
        set
        {
            if (_selectedTrack != value)
            {
                _selectedTrack = value;
                OnTrackChanged();  // Call the station change handler
            }
        }
    }

    private string _selectedTrack;

    private async Task OnStationChanged()
    {
        if (!string.IsNullOrEmpty(selectedStation) && _stations.Any(s => s.Url == selectedStation))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings!.IP_Adress, selectedStation);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);

        }
    }
    
    private async Task OnTrackChanged()
    {
        if (!string.IsNullOrEmpty(selectedTrack) && _tracks.Any(s => s.Url == selectedTrack))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings!.IP_Adress, selectedTrack);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(spotifyUrl))
            {
                await PlaySpotifyTrack(spotifyUrl);
                spotifyUrl = string.Empty; // Clear the input field after submission
            }
        }
    }

    private async Task PlaySpotifyTrack(string url)
    {
        if (_settings is not null)
        {
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings.IP_Adress, url);
        }
    }

    private async Task PreviousTrack()
    {
        await _uow.ISonosConnectorRepo.PreviousTrack(_settings!.IP_Adress);
    }
    
    private async Task NextTrack()
    {
        await _uow.ISonosConnectorRepo.NextTrack(_settings!.IP_Adress);
    }

    private async Task LoadQueue()
    {
        if (currentStationDisplay == "Spotify") // Check if playing Spotify
        {
            //var currentTrack = await _uow.ISonosConnectorRepo.GetCurrentTrack(_settings!.IP_Adress);
            //queue = new List<string> { currentTrack };
        }
        else
        {
            queue = await _uow.ISonosConnectorRepo.GetQueue(_settings!.IP_Adress);
        }
    
        await InvokeAsync(StateHasChanged);
    }

    
    private async Task ClearQueue()
    {
        await _uow.ISonosConnectorRepo.ClearQueue(_settings!.IP_Adress);
        queue.Clear();
    }

    private List<TuneInStation> _stations => _settings?.Stations ?? new();
    
    private List<SpotifyObject> _tracks => _settings?.SpotifyTracks ?? new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _settings = await _uow.ISettingsRepo.GetSettings();

        if (_settings!.IP_Adress is "10.0.0.0")
            return;

        _settings!.Volume = await _uow.ISonosConnectorRepo.GetVolume(_settings!.IP_Adress);
        await SaveSettings();
        _isPlaying = await IsPlaying();
        _stationUpdateTimer = new Timer(async _ => await LoadCurrentStation(), null, 0, 5000);
        //await LoadQueue();
    }

    private async Task Play(bool play)
    {
        if (play)
        {
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            _isPlaying = true;
        }
        else
        {
            await _uow.ISonosConnectorRepo.PausePlaying(_settings!.IP_Adress);
            _isPlaying = false;
        }

        //_isPlaying = await IsPlaying();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> IsPlaying()
    {
        return await _uow.ISonosConnectorRepo.IsPlaying(_settings!.IP_Adress);
    }

    private int Volume
    {
        get => _settings!.Volume;
        set
        {
            _settings!.Volume = value;
            _uow.ISonosConnectorRepo.SetVolume(_settings!.IP_Adress, value);
            SaveSettings();
        }
    }

    private TimeOnly StartTime
    {
        get => _settings!.StartTime;
        set
        {
            _settings!.StartTime = value;
            SaveSettings();
        }
    }

    private TimeOnly StopTime
    {
        get => _settings!.StopTime;
        set
        {
            _settings!.StopTime = value;
            SaveSettings();
        }
    }

    private TimeOnly TimeRightNow = TimeOnly.FromDateTime(DateTime.Now);

    private string IP_Adress
    {
        get => _settings!.IP_Adress;
        set
        {
            _settings!.IP_Adress = value;
            SaveSettings();
        }
    }

    private async Task SaveSettings()
    {
        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }
    
    private async Task AddStation()
    {
        if (string.IsNullOrWhiteSpace(newStationName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newStationUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }

        //if (!Regex.IsMatch(newStationUrl, stationUrlPattern))
        //{
        //    addStationErrorMessage = "Station URL format is invalid.";
        //    return;
        //}

        // Clear error message on success
        addStationErrorMessage = null;

        _settings ??= new SonosSettings();
        _settings.Stations ??= new List<TuneInStation>();
        _settings.Stations.Add(new TuneInStation { Name = newStationName, Url = newStationUrl });
        newStationName = newStationUrl = "";

        await SaveSettings();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task RemoveStation(TuneInStation station)
    {
        if (_settings == null) return;

        _settings.Stations?.Remove(station);
        await SaveSettings();
        await InvokeAsync(StateHasChanged);
    }

    // Remove Spotify track
    private async Task RemoveSpotifyTrack(SpotifyObject track)
    {
        _settings.SpotifyTracks.Remove(track);
        // You may also want to save the settings after removing it
        Console.WriteLine($"Removed track: {track.Name}");
        await SaveSettings();
        await InvokeAsync(StateHasChanged);
    }

    // Add a new Spotify track
    private async Task AddNewSpotifyTrack()
    {
        if (string.IsNullOrWhiteSpace(newTrackName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTrackUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }
        
        // Example: Open a form to add a new track
        _settings.SpotifyTracks.Add(new SpotifyObject(){Name = newTrackName, Url = newTrackUrl});
        Console.WriteLine("Added new Spotify track.");
        
        await SaveSettings();
        
        addStationErrorMessage = null;
        newTrackName = newStationUrl ="";
        
        await InvokeAsync(StateHasChanged);
    }

}

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .header-display {
        color: #ffffff;
        font-weight: bold;
        font-size: 24px;
        text-align: center;
        margin-bottom: 20px;
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        margin-top: 10px;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .text-muted {
        color: #ffffff !important;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }
</style>