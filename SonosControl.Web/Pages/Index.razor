@page "/"
@using System.Text.RegularExpressions
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin,operator")]

<PageTitle>Sonos Control</PageTitle>
<AuthorizeView Roles="admin,operator">
    <Authorized>
        @if (_settings is not null)
        {
            <div class="container p-4 bg-dark text-light rounded-4 shadow">
                <h3 class="mb-4 border-bottom pb-2">🎛️ Sonos Control Panel</h3>

                <!-- Playback Status -->
                <div class="mb-4">
                    @if (_isPlaying)
                    {
                        <div class="alert alert-success d-flex justify-content-between align-items-center">
                            <div>
                                <strong>Now Playing</strong>
                                <p class="mb-0 text-light-emphasis">Click to pause playback.</p>
                            </div>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-danger me-2" @onclick="@(() => Play(false))">
                                    <i class="fa fa-pause"></i>
                                </button>
                                @if (_isSpotifyPlaying)
                                {
                                    <button class="btn btn-primary" @onclick="NextTrack">
                                        <i class="fa fa-forward"></i>
                                    </button>
                                }
                                <button class="btn btn-primary me-2" @onclick="ShuffleStation" title="Shuffle">
                                    🔀
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning d-flex justify-content-between align-items-center">
                            <div>
                                <strong>Playback Paused</strong>
                                <p class="mb-0 text-light-emphasis">Click to start playing music.</p>
                            </div>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-success me-2" @onclick="() => Play(true)">
                                    <i class="fa fa-play"></i>
                                </button>
                                <button class="btn btn-primary" @onclick="ShuffleStation" title="Shuffle">
                                    🔀
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <!-- Now Playing Card -->
                <div class="card bg-secondary text-white mb-4 shadow-sm border-0 rounded-4">
                    <div class="card-body d-flex align-items-start gap-3">
                        <div class="display-5">🎵</div>
                        <div class="flex-grow-1 text-wrap">
                            <h5 class="mb-2">Currently Playing</h5>
                            <p class="mb-1 text-light-emphasis currently-playing-text text-break">
                                <strong>Station:</strong> @currentStationDisplay
                            </p>
                            <p class="mb-0 text-light-emphasis currently-playing-text text-break">
                                <strong>Track:</strong> @currentlyPlaying
                            </p>
                            @if (!string.IsNullOrWhiteSpace(trackProgress))
                            {
                                <p class="mb-0 text-light-emphasis currently-playing-text text-break">
                                    <strong>Time:</strong> @trackProgress
                                </p>
                            }
                        </div>
                    </div>
                </div>


                <!-- TuneIn Station Section -->
                <div class="form-section mb-5">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">📻 TuneIn Stations</h5>
                        <button
                            class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                            style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                            @onclick="() => isEditMode = !isEditMode">
                            <i class="fa fa-pencil"></i>
                            @(isEditMode ? "Done" : "Edit")
                        </button>
                    </div>

                    @if (isEditMode)
                    {
                        @if (!string.IsNullOrEmpty(addStationErrorMessage))
                        {
                            <div class="alert alert-danger">@addStationErrorMessage</div>
                        }

                        <div class="mb-3">
                            <h6>Add New Station</h6>
                            <div class="mb-2">
                                <label>Station Name</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newStationName" @bind:event="oninput"
                                       placeholder="Antenne Vorarlberg"/>
                            </div>
                            <div class="mb-2">
                                <label>Station URL</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newStationUrl" @bind:event="oninput"
                                       placeholder="web.radio.example.com/stream"
                                       pattern="@stationUrlPattern"/>
                            </div>
                            <button class="btn btn-success mt-2" @onclick="AddStation" disabled="@(!CanAddStation)">
                                Add Station
                            </button>
                        </div>

                        <ul class="list-group">
                            @foreach (var station in _stations)
                            {
                                <li class="list-group-item bg-dark text-white px-3 py-2">
                                    <div class="row align-items-center">
                                        <div class="col-10 text-truncate">
                                            @(station.Name.Length > 33 ? station.Name.Substring(0, 33) + "..." : station.Name)
                                        </div>
                                        <div class="col-2 text-end">
                                            <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                                    title="Remove"
                                                    @onclick="() => RemoveStation(station)">
                                                <i class="fa fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <select class="form-select bg-secondary text-light border-0 mt-2" @bind="selectedStation">
                            <option value="">-- Select Station --</option>
                            @foreach (var station in _stations)
                            {
                                <option
                                    value="@station.Url">@(station.Name.Length > 33 ? station.Name.Substring(0, 33) + "..." : station.Name)</option>
                            }
                        </select>
                    }
                </div>

                <!-- Spotify Tracks Section -->
                <div class="form-section">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">🎶 Spotify Tracks</h5>
                        <button
                            class="btn btn-outline-light btn-sm d-flex align-items-center px-2 py-1 gap-1"
                            style="white-space: nowrap; font-size: 0.75rem; width: auto; margin-top: 0;"
                            @onclick="() => isSpotifyEditMode = !isSpotifyEditMode">
                            <i class="fa fa-pencil"></i>
                            @(isEditMode ? "Done" : "Edit")
                        </button>
                    </div>

                    @if (isSpotifyEditMode)
                    {
                        @if (!string.IsNullOrEmpty(addTrackErrorMessage))
                        {
                            <div class="alert alert-danger">@addTrackErrorMessage</div>
                        }

                        <ul class="list-group mb-3">
                            @foreach (var track in _tracks)
                            {
                                <li class="list-group-item bg-dark text-white px-3 py-2">
                                    <div class="row align-items-center">
                                        <div class="col-10 text-truncate">
                                            @track.Name
                                        </div>
                                        <div class="col-2 text-end">
                                            <button class="btn btn-sm btn-outline-danger px-2 py-1 station-remove-btn"
                                                    title="Remove"
                                                    @onclick="() => RemoveSpotifyTrack(track)">
                                                <i class="fa fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>

                        <div>
                            <div class="mb-2">
                                <label>Name</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newTrackName" @bind:event="oninput"
                                       placeholder="Crunchyroll Anime Essentials"/>
                            </div>
                            <div class="mb-2">
                                <label>Spotify URL</label>
                                <input class="form-control bg-secondary text-light border-0"
                                       @bind="newTrackUrl" @bind:event="oninput"
                                       placeholder="https://open.spotify.com/playlist/..."
                                       title="Valid Spotify link required"/>
                            </div>
                            <button class="btn btn-success mt-2" @onclick="AddNewSpotifyTrack"
                                    disabled="@(!CanAddTrack)">
                                Add Spotify Track
                            </button>
                        </div>
                    }
                    else
                    {
                        <select class="form-select bg-secondary text-light border-0 mt-2" @bind="selectedTrack">
                            <option value="">-- Select Spotify Track --</option>
                            @foreach (var track in _tracks)
                            {
                                <option
                                    value="@track.Url">@(track.Name.Length > 33 ? track.Name.Substring(0, 33) + "..." : track.Name)</option>
                            }
                        </select>
                    }
                </div>

                <hr/>

                <!-- Spotify URL Section -->
                <div class="form-section mb-5">
                    <h5 class="mb-2">🎧 Play Spotify URL</h5>
                    <input type="text" class="form-control bg-secondary text-light border-0"
                           @bind-value="spotifyUrl" @bind-value:event="oninput"
                           @onkeyup="HandleKeyPress" placeholder="Enter Spotify URL"/>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            You must be logged in as an admin or operator to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>



@code {
    private SonosSettings? _settings;
    private bool _isPlaying;
    private bool _isSpotifyPlaying;
    private string? spotifyUrl;

    private bool isAuthenticated;
    private bool isAdmin;
    private bool isOperator;

    private bool isEditMode = false;
    private string newStationName = "";
    private string newTrackName = "";
    private string newStationUrl = "";
    private string newTrackUrl = "";


    private bool isSpotifyEditMode = false;

    private string currentStationUrl = "Loading...";
    private string currentStationDisplay = "Loading...";

    private string currentlyPlaying = "Loading...";
    private string currentyPlayingDisplay = "Loading...";
    private string trackProgress = "";
    private Timer? _stationUpdateTimer;
    private string? addStationErrorMessage;
    private string? addTrackErrorMessage;

    private List<TuneInStation> _stations =>
        (_settings?.Stations ?? new List<TuneInStation>())
        .OrderBy(s => s.Name)
        .ToList();

    private List<SpotifyObject> _tracks =>
        (_settings?.SpotifyTracks ?? new List<SpotifyObject>())
        .OrderBy(t => t.Name)
        .ToList();
    
    private string stationUrlPattern = @"^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(/[a-zA-Z0-9\-._~%!$&'()*+,;=:@/]*)*$";

    private List<string> queue = new();

    private async Task LoadCurrentStation()
    {
        if (_settings is not null)
        {
            var rawStationUrl = await _uow.ISonosConnectorRepo.GetCurrentStationAsync(_settings.IP_Adress);
            currentStationUrl = rawStationUrl.Replace("x-rincon-mp3radio://", "").Trim();

            if (currentStationUrl.Contains("spotify", StringComparison.OrdinalIgnoreCase))
            {
                currentStationDisplay = "Spotify";
                _isSpotifyPlaying = true;
            }
            else
            {
                // Try to match with saved stations first
                var matched = _stations.FirstOrDefault(s => currentStationUrl?.Contains(s.Url, StringComparison.OrdinalIgnoreCase) == true);
                if (matched != null)
                {
                    currentStationDisplay = matched.Name;
                }
                else
                {
                    currentStationDisplay = currentStationUrl;
                }

                _isSpotifyPlaying = false;
            }

            currentlyPlaying = await _uow.ISonosConnectorRepo.GetCurrentTrackAsync(_settings.IP_Adress);
            var progress = await _uow.ISonosConnectorRepo.GetTrackProgressAsync(_settings.IP_Adress);

            if (progress.Duration == TimeSpan.Zero)
            {
                trackProgress = progress.Position == TimeSpan.Zero
                    ? string.Empty
                    : $"{progress.Position:mm\\:ss}";
            }
            else
            {
                trackProgress = $"{progress.Position:mm\\:ss} / {progress.Duration:mm\\:ss}";
            }

            await InvokeAsync(StateHasChanged);
        }
    }


    private string selectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                OnStationChanged(); // Call the station change handler
            }
        }
    }

    private bool CanAddStation => !string.IsNullOrWhiteSpace(newStationName) && !string.IsNullOrWhiteSpace(newStationUrl);
    private bool CanAddTrack => !string.IsNullOrWhiteSpace(newTrackName) && !string.IsNullOrWhiteSpace(newTrackUrl);

    private string _selectedStation;

    private string selectedTrack
    {
        get => _selectedTrack;
        set
        {
            if (_selectedTrack != value)
            {
                _selectedTrack = value;
                OnTrackChanged(); // Call the station change handler
            }
        }
    }

    private string _selectedTrack;

    private async Task OnStationChanged()
    {
        if (!string.IsNullOrEmpty(selectedStation))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings!.IP_Adress, selectedStation);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            await AddLog("Station Changed", $"URL: {selectedStation}");
        }
    }

    private async Task OnTrackChanged()
    {
        if (!string.IsNullOrEmpty(selectedTrack) && _tracks.Any(s => s.Url == selectedTrack))
        {
            // Set the selected stream URL to the Sonos speaker
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings!.IP_Adress, selectedTrack);
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            await AddLog("Spotify Track Changed", $"URL: {selectedTrack}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(spotifyUrl))
            {
                await PlaySpotifyTrack(spotifyUrl);
                spotifyUrl = string.Empty; // Clear the input field after submission
            }
        }
    }

    private async Task PlaySpotifyTrack(string url)
    {
        if (_settings is not null)
        {
            await _uow.ISonosConnectorRepo.PlaySpotifyTrackAsync(_settings.IP_Adress, url);
            await AddLog("Spotify URL Played", url);
        }
    }

    private async Task PreviousTrack()
    {
        await _uow.ISonosConnectorRepo.PreviousTrack(_settings!.IP_Adress);
        await AddLog("Previous Track");
    }

    private async Task NextTrack()
    {
        await _uow.ISonosConnectorRepo.NextTrack(_settings!.IP_Adress);
        await AddLog("Next Track");
    }

    private async Task LoadQueue()
    {
        if (currentStationDisplay == "Spotify") // Check if playing Spotify
        {
            //var currentTrack = await _uow.ISonosConnectorRepo.GetCurrentTrack(_settings!.IP_Adress);
            //queue = new List<string> { currentTrack };
        }
        else
        {
            queue = await _uow.ISonosConnectorRepo.GetQueue(_settings!.IP_Adress);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddLog(string action, string? details = null)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name ?? "Unknown";

        var log = new LogEntry
        {
            Action = action,
            PerformedBy = username,
            Timestamp = DateTime.UtcNow,
            Details = details
        };

        Db.Logs.Add(log);
        await Db.SaveChangesAsync();
    }

    private async Task ClearQueue()
    {
        await _uow.ISonosConnectorRepo.ClearQueue(_settings!.IP_Adress);
        queue.Clear();
        await AddLog("Queue Cleared");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            // Load your settings and initialize page as before
            _settings = await _uow.ISettingsRepo.GetSettings();

            if (_settings!.IP_Adress is "10.0.0.0")
                return;

            _settings!.Volume = await _uow.ISonosConnectorRepo.GetVolume(_settings!.IP_Adress);
            await SaveSettings();
            _isPlaying = await IsPlaying();
            _stationUpdateTimer = new Timer(async _ => await LoadCurrentStation(), null, 0, 1000);
        }
    }

    private async Task Play(bool play)
    {
        if (play)
        {
            await _uow.ISonosConnectorRepo.StartPlaying(_settings!.IP_Adress);
            _isPlaying = true;
            await AddLog("Playback Started");
        }
        else
        {
            await _uow.ISonosConnectorRepo.PausePlaying(_settings!.IP_Adress);
            _isPlaying = false;
            await AddLog("Playback Started");
        }

        //_isPlaying = await IsPlaying();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> IsPlaying()
    {
        return await _uow.ISonosConnectorRepo.IsPlaying(_settings!.IP_Adress);
    }

    private async Task SaveSettings()
    {
        await _uow.ISettingsRepo.WriteSettings(_settings!);
    }

    private async Task AddStation()
    {
        if (string.IsNullOrWhiteSpace(newStationName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newStationUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }

        await AddLog("Station Added", $"{newStationName} ({newStationUrl})");
        addStationErrorMessage = null;

        _settings ??= new SonosSettings();
        _settings.Stations ??= new List<TuneInStation>();
        _settings.Stations.Add(new TuneInStation { Name = newStationName, Url = newStationUrl });
        newStationName = newStationUrl = "";

        await SaveSettings();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveStation(TuneInStation station)
    {
        if (_settings == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete station '{station.Name}'?");
        if (!confirmed) return;

        _settings.Stations?.Remove(station);
        await SaveSettings();

        await AddLog("Station Removed", $"{station.Name} ({station.Url})");
        await InvokeAsync(StateHasChanged);
    }

    // Remove Spotify track
    private async Task RemoveSpotifyTrack(SpotifyObject track)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete track '{track.Name}'?");
        if (!confirmed) return;

        _settings.SpotifyTracks.Remove(track);
        // You may also want to save the settings after removing it
        Console.WriteLine($"Removed track: {track.Name}");
        await SaveSettings();

        await AddLog("Spotify Track Removed", $"{track.Name} ({track.Url})");
        await InvokeAsync(StateHasChanged);
    }

    // Add a new Spotify track
    private async Task AddNewSpotifyTrack()
    {
        if (string.IsNullOrWhiteSpace(newTrackName))
        {
            addStationErrorMessage = "Station name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTrackUrl))
        {
            addStationErrorMessage = "Station URL is required.";
            return;
        }

        // Example: Open a form to add a new track
        _settings.SpotifyTracks.Add(new SpotifyObject() { Name = newTrackName, Url = newTrackUrl });
        Console.WriteLine("Added new Spotify track.");

        await SaveSettings();
        await AddLog("Spotify Track Added", $"{newTrackName} ({newTrackUrl})");

        addStationErrorMessage = null;
        newTrackName = newTrackUrl = "";

        await InvokeAsync(StateHasChanged);
    }

    private Random _random = new();

    private async Task ShuffleStation()
    {
        if (_settings?.Stations != null && _settings.Stations.Any())
        {
            var randomStation = _settings.Stations[_random.Next(_settings.Stations.Count)].Url;
            selectedStation = randomStation; // This triggers OnStationChanged()
            await _uow.ISonosConnectorRepo.SetTuneInStationAsync(_settings.IP_Adress, selectedStation);
            await AddLog("Shuffled Station", $"Selected: {selectedStation}");
        }
    }

}

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    input.form-control.bg-secondary::placeholder {
        color: rgba(255, 255, 255, 0.6); /* soft white */
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }

    .station-remove-btn,
    .spotify-remove-btn {
        padding: 2px 8px;
        font-size: 0.75rem;
        line-height: 1;
        width: auto;
        white-space: nowrap;
    }

    .currently-playing-text {
        word-break: break-word;
        overflow-wrap: break-word;
        font-size: 0.9rem;
        max-width: 100%;
    }

    @@media (max-width: 576px) {
        .card-body {
            flex-direction: column;
            align-items: flex-start !important;
        }

        .card-body .display-6 {
            margin-bottom: 0.5rem;
        }

        .currently-playing-text {
            font-size: 0.85rem;
        }
    }

    .currently-playing-text {
        word-break: break-word;
        overflow-wrap: anywhere;
        white-space: normal; /* allow wrapping */
        overflow: visible;   /* let it grow naturally */
        text-overflow: unset; /* remove ellipsis */
        max-width: 100%;
        font-size: 0.9rem;
    }


</style>