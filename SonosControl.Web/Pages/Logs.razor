@page "/logs"
@using SonosControl.Web.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SonosControl.Web.Data
@inject ApplicationDbContext Db
@using SonosControl.Web.Models;
@attribute [Authorize(Roles = "admin,operator,superadmin")]

<PageTitle>System Logs</PageTitle>


        <div class="container-fluid logs-container p-4 bg-dark text-light rounded-4 shadow mt-5">
            <h3 class="mb-4 border-bottom pb-2">📜 System Logs</h3>

            @if (logs == null)
            {
                <p class="text-muted">Loading logs...</p>
            }
            else if (!logs.Any())
            {
                <div class="alert alert-warning">No logs found.</div>
            }
            else
            {
                <div class="mb-4 row gx-3 align-items-center flex-wrap">
                    <div class="col-auto">
                        <label for="logCountSelect" class="form-label mb-0">Show:</label>
                    </div>
                    <div class="col-auto">
                        <select id="logCountSelect"
                                class="form-select form-select-sm bg-secondary text-light border-0"
                                @bind="selectedLogCount">
                            <option value="50">50</option>
                            <option value="100">100</option>
                            <option value="500">500</option>
                            <option value="1000">1000</option>
                            <option value="-1">Custom</option>
                        </select>
                    </div>

                    @if (selectedLogCount == -1)
                    {
                        <div class="col-auto">
                            <input type="number"
                                   class="form-control form-control-sm bg-secondary text-light border-0"
                                   placeholder="Enter number"
                                   style="max-width: 120px;"
                                   @bind="customLogCount"
                                   @bind:event="onchange"/>
                        </div>
                    }
                </div>

                <div class="table-responsive">
                    <table class="table table-dark table-hover table-striped align-middle">
                        <thead class="table-secondary text-dark">
                        <tr>
                            <th>Date</th>
                            <th>User</th>
                            <th class="d-none d-sm-table-cell">Action</th>
                            <th class="d-none d-md-table-cell">Details</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var log in logs)
                        {
                            <tr>
                                <td>@log.Timestamp.ToLocalTime().ToString("g")</td>
                                <td>@log.PerformedBy</td>
                                <td class="d-none d-sm-table-cell">@log.Action</td>
                                <td class="d-none d-md-table-cell">@log.Details</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>

@code {
    private List<LogEntry>? logs;
    private int _selectedLogCount = 100;

    private int selectedLogCount
    {
        get => _selectedLogCount;
        set
        {
            if (_selectedLogCount != value)
            {
                _selectedLogCount = value;
                _ = RefreshLogs();
            }
        }
    }

    private int _customLogCount = 200;

    private int customLogCount
    {
        get => _customLogCount;
        set
        {
            if (_customLogCount != value)
            {
                _customLogCount = value;
                _ = RefreshLogs();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshLogs();
    }

    private async Task RefreshLogs()
    {
        int countToTake = selectedLogCount == -1 ? customLogCount : selectedLogCount;
        if (countToTake <= 0) countToTake = 100;

        logs = Db.Logs
            .OrderByDescending(l => l.Timestamp)
            .Take(countToTake)
            .ToList();
    }

}

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .form-section {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #bbbbbb;
    }

    .form-control, .form-select {
        background-color: #333333;
        border: 1px solid #555555;
        color: #ffffff;
        border-radius: 5px;
        padding: 10px;
    }

    .form-control:disabled {
        background-color: #333333 !important;
        color: #bbbbbb !important;
        border: 1px solid #555555 !important;
        opacity: 1; /* Prevents browsers from making it look faded */
    }

    .form-control:focus, .form-select:focus {
        border-color: #888888;
        outline: none;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    }

    .alert {
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .alert-success {
        background-color: #2e7d32;
        color: #ffffff;
        border: 1px solid #1b5e20;
    }

    .alert-warning {
        background-color: #b8860b;
        color: #ffffff;
        border: 1px solid #8b6508;
    }

    .btn {
        width: 100%;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #d32f2f;
        border: 1px solid #b71c1c;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #b71c1c;
    }

    .btn-success {
        background-color: #388e3c;
        border: 1px solid #2e7d32;
        color: #ffffff;
    }

    .btn-success:hover {
        background-color: #2e7d32;
    }

    .list-group-item {
        border: 1px solid #555;
    }

    input.form-control.bg-secondary::placeholder {
        color: rgba(255, 255, 255, 0.6); /* soft white */
    }

    .station-remove-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .station-remove-btn {
        font-size: 0.8rem;
        line-height: 1;
        padding: 2px 6px;
    }

    .btn-inline {
        width: auto !important;
        margin-top: 0 !important;
    }

    .station-remove-btn,
    .spotify-remove-btn {
        padding: 2px 8px;
        font-size: 0.75rem;
        line-height: 1;
        width: auto;
        white-space: nowrap;
    }

    .table th, .table td {
        font-size: 0.85rem;
        padding: 0.5rem 0.75rem;
    }

    .form-select-sm, .form-control-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .logs-container {
        max-width: 100%;
        margin: 0 auto;
    }

    @@media (min-width: 992px) {
    .logs-container {
        max-width: 960px; /* Same as container-lg */
    }
    }

    @@media (min-width: 1200px) {
    .logs-container {
        max-width: 1140px; /* Same as container-xl */
    }
    }


</style>
